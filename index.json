[{"content":"实体和值对象 今天我们来看看DDD战术设计中的两个重要概念：实体和值对象。\n这两个概念都是领域模型中的领域对象。它们在领域模型中起什么作用，战术设计时如何将它们映射到代码和数据模型中去？就是我们这里重点要关注的问题。\n另外，在战略设计向战术设计过渡的这个过程中，理解和区分实体和值对象在不同阶段的形态是很重要的，毕竟阶段不同，它们的形态也会发生变化，这与我们的设计和代码实现密切相关。\n接下来，我们就分别看看实体和值对象的这些问题，从中找找答案。\n实体 我们先来看一下实体是什么东西？\n实体 在DDD中有这样一类对象，它们拥有唯一标识符，且标识符在历经各种状态变更后仍能保持一致。对这些对象而言，重要的不是其属性，而是其延续性和标识，对象的延续性和标识会跨越甚至超出软件的生命周期。 我们把这样的对象称为实体。 1. 实体的业务形态 在DDD不同的设计过程中，实体的形态是不同的。\n在战略设计时，实体是领域模型的一个重要对象。领域模型中的实体是多个属性、操作或行为的载体。 在事件风暴中，我们可以根据命令、操作或者事件，找出产生这些行为的业务实体对象，进而按照一定的业务规则将依存度高和业务关联紧密的多个实体对象和值对象进行聚类，形成聚合。 你可以这么理解，实体和值对象是组成领域模型的基础单元。\n2. 实体的代码形态 在代码模型中，实体的表现形式是实体类，这个类包含了实体的属性和方法，通过这些方法实现实体自身的业务逻辑。\n在DDD里，这些实体类通常采用充血模型，与这个实体相关的所有业务逻辑都在实体类的方法中实现，跨多个实体的领域逻辑则在领域服务中实现。\n3. 实体的运行形态 实体以DO（领域对象）的形式存在，每个实体对象都有唯一的ID。我们可以对一个实体对象进行多次修改，修改后的数据和原来的数据可能会大不相同。但是，由于它们拥有相同的ID，它们依然是同一个实体。比如商品是商品上下文的一个实体，通过唯一的商品ID来标识，不管这个商品的数据如何变化，商品的ID一直保持不变，它始终是同一个商品。\n4. 实体的数据库形态 与传统数据模型设计优先不同，DDD是先构建领域模型，针对实际业务场景构建实体对象和行为，再将实体对象映射到数据持久化对象。\n在领域模型映射到数据模型时，一个实体可能对应0个、1个或者多个数据库持久化对象。大多数情况下实体与持久化对象是一对一。在某些场景中，有些实体只是暂驻静态内存的一个运行态实体，它不需要持久化。比如，基于多个价格配置数据计算后生成的折扣实体。\n而在有些复杂场景下，实体与持久化对象则可能是一对多或者多对一的关系。比如，用户user与角色role两个持久化对象可生成权限实体，一个实体对应两个持久化对象，这是一对多的场景。再比如，有些场景为了避免数据库的联表查询，提升系统性能，会将客户信息customer和账户信息account两类数据保存到同一张数据库表中，客户和账户两个实体可根据需要从一个持久化对象中生成，这就是多对一的场景。\n值对象 值对象相对实体来说，会更加抽象一些，概念上我们会结合例子来讲。\n我们先看一下《实现领域驱动设计》一书中对值对象的定义：\n值对象的定义 通过对象属性值来识别的对象，它将多个相关属性组合为一个概念整体。在DDD中用来描述领域的特定方面，并且是一个没有标识符的对象，叫作值对象。 也就说，值对象描述了领域中的一件东西，这个东西是不可变的，它将不同的相关属性组合成了一个概念整体。当度量和描述改变时，可以用另外一个值对象予以替换。它可以和其它值对象进行相等性比较，且不会对协作对象造成副作用。这部分在后面讲“值对象的运行形态”时还会有例子。\n上面这两段对于定义的阐述，如果你还是觉得有些晦涩，我们不妨“翻译”一下，用更通俗的语言把定义讲清楚。\n简单来说，值对象本质上就是一个集。那这个集合里面有什么呢？若干个用于描述目的、具有整体概念和不可修改的属性。那这个集合存在的意义又是什么？在领域建模的过程中，值对象可以保证属性归类的清晰和概念的完整性，避免属性零碎。 这里我举个简单的例子，请看下面这张图：\n人员实体原本包括：姓名、年龄、性别以及人员所在的省、市、县和街道等属性。这样显示地址相关的属性就很零碎了对不对？现在，我们可以将“省、市、县和街道等属性”拿出来构成一个“地址属性集合”，这个集合就是值对象了。\n1. 值对象的业务形态 值对象是DDD领域模型中的一个基础对象，它跟实体一样都来源于事件风暴所构建的领域模型，都包含了若干个属性，它与实体一起构成聚合。\n我们不妨对照实体，来看值对象的业务形态，这样更好理解。本质上，实体是看得到、摸得着的实实在在的业务对象，实体具有业务属性、业务行为和业务逻辑。而值对象只是若干个属性的集合，只有数据初始化操作和有限的不涉及修改数据的行为，基本不包含业务逻辑。值对象的属性集虽然在物理上独立出来了，但在逻辑上它仍然是实体属性的一部分，用于描述实体的特征。 在值对象中也有部分共享的标准类型的值对象，它们有自己的限界上下文，有自己的持久化对象，可以建立共享的数据类微服务，比如数据字典。\n2. 值对象的代码形态 值对象在代码中有这样两种形态。如果值对象是单一属性，则直接定义为实体类的属性；如果值对象是属性集合，则把它设计为Class类，Class将具有整体概念的多个属性归集到属性集合，这样的值对象没有ID，会被实体整体引用。\n我们看一下下面这段代码，person这个实体有若干个单一属性的值对象，比如Id、name等属性；同时它也包含多个属性的值对象，比如地址address。 3. 值对象的运行形态 实体实例化后的DO对象的业务属性和业务行为非常丰富，但值对象实例化的对象则相对简单和乏味。除了值对象数据初始化和整体替换的行为外，其它业务行为就很少了。\n值对象嵌入到实体的话，有这样两种不同的数据格式，也可以说是两种方式，分别是属性嵌入的方式和序列化大对象的方式。\n引用单一属性的值对象或只有一条记录的多属性值对象的实体，可以采用属性嵌入的方式嵌入。引用一条或多条记录的多属性值对象的实体，可以采用序列化大对象的方式嵌入。比如，人员实体可以有多个通讯地址，多个地址序列化后可以嵌入人员的地址属性。值对象创建后就不允许修改了，只能用另外一个值对象来整体替换。 如果你对这两种方式不够了解，可以看看下面的例子。\n案例1：以属性嵌入的方式形成的人员实体对象，地址值对象直接以属性值嵌入人员实体中。\n案例2：以序列化大对象的方式形成的人员实体对象，地址值对象被序列化成大对象Json串后，嵌入人员实体中。\n4. 值对象的数据库形态 DDD引入值对象是希望实现从“数据建模为中心”向“领域建模为中心”转变，减少数据库表的数量和表与表之间复杂的依赖关系，尽可能地简化数据库设计，提升数据库性能。\n如何理解用值对象来简化数据库设计呢？\n传统的数据建模大多是根据数据库范式设计的，每一个数据库表对应一个实体，每一个实体的属性值用单独的一列来存储，一个实体主表会对应N个实体从表。而值对象在数据库持久化方面简化了设计，它的数据库设计大多采用非数据库范式，值对象的属性值和实体对象的属性值保存在同一个数据库实体表中。\n模型设计 举个例子，还是基于上述人员和地址那个场景，实体和数据模型设计通常有两种解决方案：\n第一是把地址值对象的所有属性都放到人员实体表中，创建人员实体，创建人员数据表； 第二是创建人员和地址两个实体，同时创建人员和地址两张表。 第一个方案会破坏地址的业务涵义和概念完整性，第二个方案增加了不必要的实体和表，需要处理多个实体和表的关系，从而增加了数据库设计的复杂性。\n那到底应该怎样设计，才能让业务含义清楚，同时又不让数据库变得复杂呢？\n我们可以综合这两个方案的优势，扬长避短。在领域建模时，我们可以把地址作为值对象，人员作为实体，这样就可以保留地址的业务涵义和概念完整性。而在数据建模时，我们可以将地址的属性值嵌入人员实体数据库表中，只创建人员数据库表。这样既可以兼顾业务含义和表达，又不增加数据库的复杂度。\n建模设计 值对象就是通过这种方式，简化了数据库设计，总结一下就是：在领域建模时，我们可以将部分对象设计为值对象，保留对象的业务涵义，同时又减少了实体的数量；在数据建模时，我们可以将值对象嵌入实体，减少实体表的数量，简化数据库设计。 另外，也有DDD专家认为，要想发挥对象的威力，就需要优先做领域建模，弱化数据库的作用，只把数据库作为一个保存数据的仓库即可。即使违反数据库设计原则，也不用大惊小怪，只要业务能够顺利运行，就没什么关系。\n5. 值对象的优势和局限 值对象是一把双刃剑，它的优势是可以简化数据库设计，提升数据库性能。但如果值对象使用不当，它的优势就会很快变成劣势。“知彼知己，方能百战不殆”，你需要理解值对象真正适合的场景。\n值对象采用序列化大对象的方法简化了数据库设计，减少了实体表的数量，可以简单、清晰地表达业务概念。这种设计方式虽然降低了数据库设计的复杂度，但却无法满足基于值对象的快速查询，会导致搜索值对象属性值变得异常困难。\n值对象采用属性嵌入的方法提升了数据库的性能，但如果实体引用的值对象过多，则会导致实体堆积一堆缺乏概念完整性的属性，这样值对象就会失去业务涵义，操作起来也不方便。\n所以，你可以对照着以上这些优劣势，结合你的业务场景，好好想一想了。那如果在你的业务场景中，值对象的这些劣势都可以避免掉，那就请放心大胆地使用值对象吧。\n实体和值对象的关系 实体和值对象是微服务底层的最基础的对象，一起实现实体最基本的核心领域逻辑。\n值对象和实体在某些场景下可以互换，很多DDD专家在这些场景下，其实也很难判断到底将领域对象设计成实体还是值对象？可以说，值对象在某些场景下有很好的价值，但是并不是所有的场景都适合值对象。你需要根据团队的设计和开发习惯，以及上面的优势和局限分析，选择最适合的方法。 关于值对象，我还要多说几句。其实，DDD引入值对象还有一个重要的原因，就是到底领域建模优先还是数据建模优先？\nDDD提倡从领域模型设计出发，而不是先设计数据模型。 前面讲过了，传统的数据模型设计通常是一个表对应一个实体，一个主表关联多个从表，当实体表太多的时候就很容易陷入无穷无尽的复杂的数据库设计，领域模型就很容易被数据模型绑架。可以说，值对象的诞生，在一定程度上，和实体是互补的。\n我们还是以前面的图示为例：\n在领域模型中人员是实体，地址是值对象，地址值对象被人员实体引用。在数据模型设计时，地址值对象可以作为一个属性集整体嵌入人员实体中，组合形成上图这样的数据模型；也可以以序列化大对象的形式加入到人员的地址属性中，前面表格有展示。\n从这个例子中，我们可以看出，同样的对象在不同的场景下，可能会设计出不同的结果。\n有些场景中，地址会被某一实体引用，它只承担描述实体的作用，并且它的值只能整体替换，这时候你就可以将地址设计为值对象，比如收货地址。而在某些业务场景中，地址会被经常修改，地址是作为一个独立对象存在的，这时候它应该设计为实体，比如行政区划中的地址信息维护。\n总结 今天我们主要学习了实体和值对象在DDD不同设计阶段的形态，以及它们从战略设计向战术设计演进过程中的设计方法。\n这个过程是从业务模型向系统模型落地的过程，比较复杂，很考验你的设计能力，很多时候我们都要结合自己的业务场景，选择合适的方法来进行微服务设计。强调一点，我们不避讳传统的设计方法，毕竟适合自己的才是最好的。希望你能充分理解实体和值对象的概念和应用，将学到的知识复用，最终将适合自己业务的DDD设计方法纳入到架构体系，实现落地。\n","permalink":"https://ximplez.github.io/topics/cs_tech/ddd_04/","summary":"DDD架构介绍","title":"DDD架构(四) -- 实体和值对象"},{"content":"通用语言和限界上下文 在DDD领域建模和系统建设过程中，有很多的参与者，包括领域专家、产品经理、项目经理、架构师、开发经理和测试经理等。对同样的领域知识，不同的参与角色可能会有不同的理解，那大家交流起来就会有障碍，怎么办呢？因此，在DDD中就出现了“通用语言”和“限界上下文”这两个重要的概念。\n这两者相辅相成，通用语言定义上下文含义，限界上下文则定义领域边界，以确保每个上下文含义在它特定的边界内都具有唯一的含义，领域模型则存在于这个边界之内。你是不是感觉这么描述很抽象？没关系，接下来我会给你一一详细讲解。 在这之前，我想请你先看这样两个问题，这也是今天内容的核心。\n为什么要提出限界上下文的概念（也就是说除了解决交流障碍这个广义的原因，还有更具体的吗）？ 限界上下文在微服务设计中的作用和意义是什么？ 什么是通用语言？ 为了更好地理解限界上下文，回答这两个问题，我们先从通用语言讲起。怎么理解通用语言这个概念呢？\n什么是通用语音 在事件风暴过程中，通过团队交流达成共识的，能够简单、清晰、准确描述业务涵义和规则的语言就是通用语言。也就是说，通用语言是团队统一的语言，不管你在团队中承担什么角色，在同一个领域的软件生命周期里都使用统一的语言进行交流。 那么，通用语言的价值也就很明了了，它可以解决交流障碍这个问题，使领域专家和开发人员能够协同合作，从而确保业务需求的正确表达。 但是，对这个概念的理解，到这里还不够。 通用语言包含术语和用例场景，并且能够直接反映在代码中。通用语言中的名词可以给领域对象命名，如商品、订单等，对应实体对象；而动词则表示一个动作或事件，如商品已下单、订单已付款等，对应领域事件或者命令。\n通用语言 通用语言贯穿DDD的整个设计过程。作为项目团队沟通和协商形成的统一语言，基于它，你就能够开发出可读性更好的代码，将业务需求准确转化为代码设计。 下面我带你看一张图，这张图描述了从事件风暴建立通用语言到领域对象设计和代码落地的完整过程。\n在事件风暴的过程中，领域专家会和设计、开发人员一起建立领域模型，在领域建模的过程中会形成通用的业务术语和用户故事。事件风暴也是一个项目团队统一语言的过程。 通过用户故事分析会形成一个个的领域对象，这些领域对象对应领域模型的业务对象，每一个业务对象和领域对象都有通用的名词术语，并且一一映射。 微服务代码模型来源于领域模型，每个代码模型的代码对象跟领域对象一一对应。 这里我再给你分享一条经验，我自己经常用，特别有效。\n设计过程中我们可以用一些表格，来记录事件风暴和微服务设计过程中产生的领域对象及其属性。比如，领域对象在DDD分层架构中的位置、属性、依赖关系以及与代码模型对象的映射关系等。\n下面是一个微服务设计实例的部分数据，表格中的这些名词术语就是项目团队在事件风暴过程中达成一致、可用于团队内部交流的通用语言。\n在这个表格里面我们可以看到，DDD分析过程中所有的领域对象以及它们的属性都被记录下来了，除了DDD的领域对象，我们还记录了在微服务设计过程中领域对象所对应的代码对象，并将它们一一映射。\n到这里，我要再强调一次。 DDD分析和设计过程中的每一个环节都需要保证限界上下文内术语的统一，在代码模型设计的时侯就要建立领域对象和代码对象的一一映射，从而保证业务模型和代码模型的一致，实现业务语言与代码语言的统一。\n如果你做到了这一点，也就是建立了领域对象和代码对象的映射关系，那就可以指导软件开发人员准确无误地按照设计文档完成微服务开发了。即使是不熟悉代码的业务人员，也可以很快找到代码的位置。 什么是限界上下文？ 那刚刚提到的限界上下文又是用来做什么的呢？\n我们知道语言都有它的语义环境，同样，通用语言也有它的上下文环境。为了避免同样的概念或语义在不同的上下文环境中产生歧义，DDD在战略设计上提出了“限界上下文”这个概念，用来确定语义所在的领域边界。\n我们可以将限界上下文拆解为两个词：限界 和 上下文。限界就是领域的边界，而上下文则是语义环境。通过领域的限界上下文，我们就可以在统一的领域边界内用统一的语言进行交流。\n限界上下文的定义 综合一下，我认为限界上下文的定义就是：用来封装通用语言和领域对象，提供上下文环境，保证在领域之内的一些术语、业务相关对象等（通用语言）有一个确切的含义，没有二义性。这个边界定义了模型的适用范围，使团队所有成员能够明确地知道什么应该在模型中实现，什么不应该在模型中实现。 进一步理解限界上下文 我们可以通过一些例子进一步理解一下这个概念，不要小看它，彻底弄懂会给你后面实践DDD打下一个坚实的基础。\n都说中文这门语言非常丰富，在不同的时空和背景下，同样的一句话会有不同的涵义。有一个例子你应该听说过。\n在一个明媚的早晨，孩子起床问妈妈：“今天应该穿几件衣服呀？”妈妈回答：“能穿多少就穿多少！”\n那到底是穿多还是穿少呢？\n如果没有具体的语义环境，还真不太好理解。但是，如果你已经知道了这句话的语义环境，比如是寒冬腊月或者是炎炎夏日，那理解这句话的涵义就会很容易了。\n所以语言离不开它的语义环境。 而业务的通用语言就有它的业务边界，我们不大可能用一个简单的术语没有歧义地去描述一个复杂的业务领域。限界上下文就是用来细分领域，从而定义通用语言所在的边界。\n现在我们用一个保险领域的例子来说明下术语的边界。\n术语的边界 保险业务领域有投保单、保单、批单、赔案等保险术语，它们分别应用于保险的不同业务流程。\n客户投保时，业务人员记录投保信息，系统对应有投保单实体对象。 缴费完成后，业务人员将投保单转为保单，系统对应有保单实体对象，保单实体与投保单实体关联。 如客户需要修改保单信息，保单变为批单，系统对应有批单实体对象，批单实体与保单实体关联。 如果客户发生理赔，生成赔案，系统对应有报案实体对象，报案实体对象与保单或者批单实体关联。 投保单、保单、批单、赔案等，这些术语虽然都跟保单有关，但不能将保单这个术语作用在保险全业务领域。因为术语有它的边界，超出了边界理解上就会出现问题。\n如果你对保险业不大了解也没关系，电商肯定再熟悉不过了吧？正如电商领域的商品一样，商品在不同的阶段有不同的术语，在销售阶段是商品，而在运输阶段则变成了货物。\n同样的一个东西，由于业务领域的不同，赋予了这些术语不同的涵义和职责边界，这个边界就可能会成为未来微服务设计的边界。 看到这，我想你应该非常清楚了，领域边界就是通过限界上下文来定义的。\n限界上下文和微服务的关系 接下来，我们对这个概念做进一步的延伸。看看限界上下文和微服务具体存在怎样的关系。\n我想你买过车险吧，或者听过吧。车险承保的流程包含了投保、缴费、出单等几个主要流程。如果出险了还会有报案、查勘、定损、理算等理赔流程。\n保险领域还是很复杂的，在这里我用一个简化的保险模型来说明下限界上下文和微服务的关系。这里还会用到我们在 [DDD架构（二）] 学到一些基础知识，比如领域和子域。\n首先，领域可以拆分为多个子领域。一个领域相当于一个问题域，领域拆分为子域的过程就是大问题拆分为小问题的过程。在这个图里面保险领域被拆分为：投保、支付、保单管理和理赔四个子域。\n子域还可根据需要进一步拆分为子子域，比如，支付子域可继续拆分为收款和付款子子域。拆到一定程度后，有些子子域的领域边界就可能变成限界上下文的边界了。\n子域可能会包含多个限界上下文，如理赔子域就包括报案、查勘和定损等多个限界上下文（限界上下文与理赔的子子域领域边界重合）。也有可能子域本身的边界就是限界上下文边界，如投保子域。\n每个领域模型都有它对应的限界上下文，团队在限界上下文内用通用语言交流。领域内所有限界上下文的领域模型构成整个领域的领域模型。\n理论上限界上下文就是微服务的边界。我们将限界上下文内的领域模型映射到微服务，就完成了从问题域到软件的解决方案。\n可以说，限界上下文是微服务设计和拆分的主要依据。在领域模型中，如果不考虑技术异构、团队沟通等其它外部因素，一个限界上下文理论上就可以设计为一个微服务。 不过，这里还是要提示一下：除了理论，微服务的拆分还是有很多限制因素的，在设计中不宜过度拆分。 那这个度怎么把握好呢？有关微服务设计和具体的拆分方法，我会在实战篇中详细讲解。\n总结 通用语言确定了项目团队内部交流的统一语言，而这个语言所在的语义环境则是由限界上下文来限定的，以确保语义的唯一性。 而领域专家、架构师和开发人员的主要工作就是通过事件风暴来划分限界上下文。限界上下文确定了微服务的设计和拆分方向，是微服务设计和拆分的主要依据。如果不考虑技术异构、团队沟通等其它外部因素，一个限界上下文理论上就可以设计为一个微服务。\n可以说，限界上下文在微服务设计中具有很重要的意义，如果限界上下文的方向偏离，那微服务的设计结果也就可想而知了。因此，我们只有理解了限界上下文的真正涵义以及它在微服务设计中的作用，才能真正发挥DDD的价值，这是基础也是前提。\n","permalink":"https://ximplez.github.io/topics/cs_tech/ddd_03/","summary":"DDD架构介绍","title":"DDD架构(三) -- 通用语言和限界上下文"},{"content":"关于领域【Domain】的讨论 如何理解领域和子域？ 什么是领域和子域 我们先看一下汉语词典中对领域的解释：“领域是从事一种专门活动或事业的范围、部类或部门。”百度百科对领域的解释：“领域具体指一种特定的范围或区域。”\n两个解释有一个共同点——范围。对了！领域就是用来确定范围的，范围即边界，这也是DDD在设计中不断强调边界的原因。\n在研究和解决业务问题时，DDD会按照一定的规则将业务领域进行细分，当领域细分到一定的程度后，DDD会将问题范围限定在特定的边界内，在这个边界内建立领域模型，进而用代码实现该领域模型，解决相应的业务问题。简言之，DDD的领域就是这个边界内要解决的业务问题域。\n既然领域是用来限定业务边界和范围的，那么就会有大小之分，领域越大，业务范围就越大，反之则相反。\n领域可以进一步划分为子领域。我们把划分出来的多个子领域称为子域，每个子域对应一个更小的问题域或更小的业务范围。\n如何建立领域体系 我们知道，DDD是一种处理高度复杂领域的设计思想，它试图分离技术实现的复杂度。那么面对错综复杂的业务领域，DDD是如何使业务从复杂变得简单，更容易让人理解，技术实现更容易呢？ 其实很好理解，DDD的研究方法与自然科学的研究方法类似。当人们在自然科学研究中遇到复杂问题时，通常的做法就是将问题一步一步地细分，再针对细分出来的问题域，逐个深入研究，探索和建立所有子域的知识体系。当所有问题子域完成研究时，我们就建立了全部领域的完整知识体系了。\n我们来看一下上面这张图。这个例子是在讲如何给桃树建立一个完整的生物学知识体系。初中生物课其实早就告诉我们研究方法了。它的研究过程是这样的。\n第一步：确定研究对象，即研究领域，这里是一棵桃树。\n第二步：对研究对象进行细分，将桃树细分为器官，器官又分为营养器官和生殖器官两种。其中营养器官包括根、茎和叶，生殖器官包括花、果实和种子。桃树的知识体系是我们已经确定要研究的问题域，对应DDD的领域。根、茎、叶、花、果实和种子等器官则是细分后的问题子域。这个过程就是DDD将领域细分为多个子域的过程。\n第三步：对器官进行细分，将器官细分为组织。比如，叶子器官可细分为保护组织、营养组织和输导组织等。这个过程就是DDD将子域进一步细分为多个子域的过程。\n第四步：对组织进行细分，将组织细分为细胞，细胞成为我们研究的最小单元。细胞之间的细胞壁确定了单元的边界，也确定了研究的最小边界。\n这里先剧透一点聚合、聚合根、实体以及值对象的内容，我会在之后的内容中详细讲解。\n我们知道细胞核、线粒体、细胞膜等物质共同构成细胞，这些物质一起协作让细胞具有这类细胞特定的生物功能。在这里你可以把细胞理解为DDD的聚合，细胞内的这些物质就可以理解为聚合里面的聚合根、实体以及值对象等，在聚合内这些实体一起协作完成特定的业务功能。这个过程类似DDD设计时，确定微服务内功能要素和边界的过程。\n领域模型 这里总结一下，就是说每一个细分的领域都会有一个知识体系，也就是DDD的领域模型。在所有子域的研究完成后，我们就建立了全域的知识体系了，也就建立了全域的领域模型。 案例理解 上面我们用自然科学研究的方法，说明了领域可以通过细分为子域的方法，来降低研究的复杂度。\n现在我们把这个话题再切换到业务领域，对比验证下，二者的细分过程是否是一致的。这里以【保险行业】为例。\n保险行业案例 保险是个比较大的领域，很早以前的保险核心系统把所有的功能都放在一个系统里来实现，这个系统就是我们常说的单体系统。后来单体系统开始无法适应保险业务的发展，因此保险公司开始了中台转型，引入分布式微服务架构来替换原来的单体系统。而分布式微服务架构就需要划分业务领域边界，建立领域模型，并实现微服务落地了。\n为实现保险领域建模和微服务建设，我们可以根据业务关联度以及流程边界将保险领域细分为：承保、收付、再保以及理赔等子域，而承保子域还可以继续细分为投保、保全（寿险）、批改（财险）等子子域。\n在投保这个限界上下文内可以建立投保的领域模型，投保的领域模型最后映射到系统就是投保微服务。这就是一个保险领域的细分和微服务的建设过程。\n那么你可能会说，我不是保险行业的人，我怎么理解这个过程呢？\n我认为，不同行业的业务模型可能会不一样，但领域建模和微服务建设的过程和方法基本类似，其核心思想就是将问题域逐步分解，降低业务理解和系统实现的复杂度。\n如何理解核心域、通用域和支撑域？ 在领域不断划分的过程中，领域会细分为不同的子域，子域可以根据自身重要性和功能属性划分为三类子域，它们分别是：核心域、通用域 和 支撑域。\n决定产品和公司核心竞争力的子域是核心域，它是业务成功的主要因素和公司的核心竞争力。\n没有太多个性化的诉求，同时被多个子域使用的通用功能子域是通用域。\n还有一种功能子域是必需的，但既不包含决定产品和公司核心竞争力的功能，也不包含通用功能的子域，它就是支撑域。\n这三类子域相较之下，核心域是最重要的。通用域和支撑域如果对应到企业系统，举例来说的话，通用域则是你需要用到的通用系统，比如认证、权限等等，这类应用很容易买到，没有企业特点限制，不需要做太多的定制化。而支撑域则具有企业特性，但不具有通用性，例如数据代码类的数据字典等系统。\n那为什么要划分核心域、通用域和支撑域，主要目的是什么呢？ 还是拿上图的桃树来说吧。我们将桃树细分为了根、茎、叶、花、果实和种子等六个子域，那桃树是否有核心域？有的话，到底哪个是核心域呢？\n不同的人对桃树的理解是不同的。如果这棵桃树生长在公园里，在园丁的眼里，他喜欢的是“人面桃花相映红”的阳春三月，这时花就是桃树的核心域。但如果这棵桃树生长在果园里，对果农来说，他则是希望在丰收的季节收获硕果累累的桃子，这时果实就是桃树的核心域。\n在不同的场景下，不同的人对桃树核心域的理解是不同的，因此对桃树的处理方式也会不一样。园丁更关注桃树花期的营养，而果农则更关注桃树落果期的营养，有时为了保证果实的营养供给，还会裁剪掉疯长的茎和叶（通用域或支撑域）。\n同样的道理，公司在IT系统建设过程中，由于预算和资源有限，对不同类型的子域应有不同的关注度和资源投入策略，记住好钢要用在刀刃上。\n很多公司的业务，表面看上去相似，但商业模式和战略方向是存在很大差异的，因此公司的关注点会不一样，在划分核心域、通用域和支撑域时，其结果也会出现非常大的差异。\n比如同样都是电商平台的淘宝、天猫、京东和苏宁易购，他们的商业模式是不同的。淘宝是C2C网站，个人卖家对个人买家，而天猫、京东和苏宁易购则是B2C网站，是公司卖家对个人买家。即便是苏宁易购与京东都是B2C的模式，他们的商业模式也是不一样的，苏宁易购是典型的传统线下卖场转型成为电商，京东则是直营加部分平台模式。 商业模式的不同会导致核心域划分结果的不同。有的公司核心域可能在客户服务，有的可能在产品质量，有的可能在物流。在公司领域细分、建立领域模型和系统建设时，我们就要结合公司战略重点和商业模式，找到核心域了，且重点关注核心域。\n如果你的公司刚好有意向转型微服务架构的话，我建议你和你的技术团队要将核心域的建设排在首位，最好是有绝对的掌控能力和自主研发能力，如果资源实在有限的话，可以在支撑域或者通用域上想想办法，暂时采用外购的方式也未尝不可。\n总结 领域的核心思想就是将问题域逐级细分，来降低业务理解和系统实现的复杂度。通过领域细分，逐步缩小微服务需要解决的问题域，构建合适的领域模型，而领域模型映射成系统就是微服务了。\n领域划分的目标 核心域、支撑域和通用域的主要目标是：通过领域划分，区分不同子域在公司内的不同功能属性和重要性，从而公司可对不同子域采取不同的资源投入和建设策略，其关注度也会不一样。 ","permalink":"https://ximplez.github.io/topics/cs_tech/ddd_02/","summary":"DDD架构介绍","title":"DDD架构(二) -- 领域"},{"content":"软件架构模式的演进 在进入今天的主题之前，我们先来了解下背景。\n我们知道，这些年来随着设备和新技术的发展，软件的架构模式发生了很大的变化。软件架构模式大体来说经历了从单机、集中式到分布式微服务架构三个阶段的演进。随着分布式技术的快速兴起，我们已经进入到了微服务架构时代。\n我们先来分析一下软件架构模式演进的三个阶段。\n第一阶段是单机架构：采用面向过程的设计方法，系统包括客户端UI层和数据库两层，采用C/S架构模式，整个系统围绕数据库驱动设计和开发，并且总是从设计数据库和字段开始。\n第二阶段是集中式架构：采用面向对象的设计方法，系统包括业务接入层、业务逻辑层和数据库层，采用经典的三层架构，也有部分应用采用传统的SOA架构。这种架构容易使系统变得臃肿，可扩展性和弹性伸缩性差。\n第三阶段是分布式微服务架构：随着微服务架构理念的提出，集中式架构正向分布式微服务架构演进。微服务架构可以很好地实现应用之间的解耦，解决单体应用扩展性和弹性伸缩能力不足的问题。\n我们知道，在单机和集中式架构时代，系统分析、设计和开发往往是独立、分阶段割裂进行的。\n比如，在系统建设过程中，我们经常会看到这样的情形：A负责提出需求，B负责需求分析，C负责系统设计，D负责代码实现，这样的流程很长，经手的人也很多，很容易导致信息丢失。最后，就很容易导致需求、设计与代码实现的不一致，往往到了软件上线后，我们才发现很多功能并不是自己想要的，或者做出来的功能跟自己提出的需求偏差太大。\n而且在单机和集中式架构这两种模式下，软件无法快速响应需求和业务的迅速变化，最终错失发展良机。此时，分布式微服务的出现就有点恰逢其时的意思了。\n微服务设计和拆分的困境 那进入微服务架构时代以后，微服务确实也解决了原来采用集中式架构的单体应用的很多问题，比如扩展性、弹性伸缩能力、小规模团队的敏捷开发等等。\n但在看到这些好处的同时，微服务实践过程中也产生了不少的争论和疑惑：微服务的粒度应该多大呀？微服务到底应该如何拆分和设计呢？微服务的边界应该在哪里？\n可以说，很久以来都没有一套系统的理论和方法可以指导微服务的拆分，包括微服务架构模式的提出者Martin Fowler在提出微服务架构的时候，也没有告诉我们究竟应该如何拆分微服务。\n于是，在这段较长的时间里，就有不少人对微服务的理解产生了一些曲解。有人认为：“微服务很简单，不过就是把原来一个单体包拆分为多个部署包，或者将原来的单体应用架构替换为一套支持微服务架构的技术框架，就算是微服务了。” 还有人说：“微服务嘛，就是要微要小，拆得越小效果越好。”\n但我想，这两年，你在技术圈中一定听说过一些项目因为前期微服务拆分过度，导致项目复杂度过高，无法上线和运维。\n综合来看，我认为微服务拆分困境产生的根本原因就是不知道业务或者微服务的边界到底在什么地方。换句话说，确定了业务边界和应用边界，这个困境也就迎刃而解了。\n那如何确定，是否有相关理论或知识体系支持呢？在回答这些问题之前，我们先来了解一下领域驱动设计与微服务的前世今生。\nDDD的前世今生 2004年埃里克·埃文斯（Eric Evans）发表了《领域驱动设计》（Domain-Driven Design –Tackling Complexity in the Heart of Software）这本书，从此领域驱动设计（Domain Driven Design，简称DDD）诞生。DDD核心思想是通过领域驱动设计方法定义领域模型，从而确定业务和应用边界，保证业务模型与代码模型的一致性。\n但DDD提出后在软件开发领域一直都是“雷声大，雨点小”！直到Martin Fowler提出微服务架构，DDD才真正迎来了自己的时代。\n有些熟悉DDD设计方法的软件工程师在进行微服务设计时，发现可以利用DDD设计方法来建立领域模型，划分领域边界，再根据这些领域边界从业务视角来划分微服务边界。而按照DDD方法设计出的微服务的业务和应用边界都非常合理，可以很好地实现微服务内部和外部的“高内聚、低耦合”。于是越来越多的人开始把DDD作为微服务设计的指导思想。\n现在，很多大型互联网企业已经将DDD设计方法作为微服务的主流设计方法了。DDD也从过去“雷声大，雨点小”，开始真正火爆起来。\n为什么DDD适合微服务？ “众里寻他千百度。蓦然回首，那人却在灯火阑珊处。”在经历了多年的迷茫和争论后，微服务终于寻到了他的心上人。\nDDD的魔力 那DDD到底是何方神圣，拥有什么神器呢？ DDD是一种处理高度复杂领域的设计思想，它试图分离技术实现的复杂性，并围绕业务概念构建领域模型来控制业务的复杂性，以解决软件难以理解，难以演进的问题。DDD不是架构，而是一种架构设计方法论，它通过边界划分将复杂业务领域简单化，帮我们设计出清晰的领域和应用边界，可以很容易地实现架构演进。\nDDD包括战略设计和战术设计两部分。\n战略设计主要从业务视角出发，建立业务领域模型，划分领域边界，建立通用语言的限界上下文，限界上下文可以作为微服务设计的参考边界。\n战术设计则从技术视角出发，侧重于领域模型的技术实现，完成软件开发和落地，包括：聚合根、实体、值对象、领域服务、应用服务和资源库等代码逻辑的设计和实现。\n我们不妨来看看DDD是如何进行战略设计的。\nDDD战略设计会建立领域模型，领域模型可以用于指导微服务的设计和拆分。事件风暴是建立领域模型的主要方法，它是一个从发散到收敛的过程。它通常采用用例分析、场景分析和用户旅程分析，尽可能全面不遗漏地分解业务领域，并梳理领域对象之间的关系，这是一个发散的过程。事件风暴过程会产生很多的实体、命令、事件等领域对象，我们将这些领域对象从不同的维度进行聚类，形成如聚合、限界上下文等边界，建立领域模型，这就是一个收敛的过程。\n我们可以用三步来划定领域模型和微服务的边界。\n第一步：在事件风暴中梳理业务过程中的用户操作、事件以及外部依赖关系等，根据这些要素梳理出领域实体等领域对象。\n第二步：根据领域实体之间的业务关联性，将业务紧密相关的实体进行组合形成聚合，同时确定聚合中的聚合根、值对象和实体。在这个图里，聚合之间的边界是第一层边界，它们在同一个微服务实例中运行，这个边界是逻辑边界，所以用虚线表示。\n第三步：根据业务及语义边界等因素，将一个或者多个聚合划定在一个限界上下文内，形成领域模型。在这个图里，限界上下文之间的边界是第二层边界，这一层边界可能就是未来微服务的边界，不同限界上下文内的领域逻辑被隔离在不同的微服务实例中运行，物理上相互隔离，所以是物理边界，边界之间用实线来表示。\n有了这两层边界，微服务的设计就不是什么难事了。\n在战略设计中我们建立了领域模型，划定了业务领域的边界，建立了通用语言和限界上下文，确定了领域模型中各个领域对象的关系。到这儿，业务端领域模型的设计工作基本就完成了，这个过程同时也基本确定了应用端的微服务边界。\n在从业务模型向微服务落地的过程中，也就是从战略设计向战术设计的实施过程中，我们会将领域模型中的领域对象与代码模型中的代码对象建立映射关系，将业务架构和系统架构进行绑定。当我们去响应业务变化调整业务架构和领域模型时，系统架构也会同时发生调整，并同步建立新的映射关系。\nDDD与微服务的关系 有了上面的讲解，现在我们不妨再次总结下DDD与微服务的关系。\nDDD与微服务的关系 DDD是一种架构设计方法，微服务是一种架构风格，两者从本质上都是为了追求高响应力，而从业务视角去分离应用系统建设复杂度的手段。两者都强调从业务出发，其核心要义是强调根据业务发展，合理划分领域边界，持续调整现有架构，优化现有代码，以保持架构和代码的生命力，也就是我们常说的演进式架构。 DDD主要关注：从业务领域视角划分领域边界，构建通用语言进行高效沟通，通过业务抽象，建立领域模型，维持业务和代码的逻辑一致性。\n微服务主要关注：运行时的进程间通信、容错和故障隔离，实现去中心化数据管理和去中心化服务治理，关注微服务的独立开发、测试、构建和部署。\n总结 总结 今天我们主要讨论了微服务设计和拆分的难题。通过DDD战略设计可以建立领域模型，划定领域边界，解决微服务设计过程中，边界难以划定的难题。如果你的业务焦点在领域和领域逻辑，那么你就可以选择DDD作为微服务的设计方法！\n更关键的一点是，DDD不仅可以用于微服务设计，还可以很好地应用于企业中台的设计。如果你的企业正在做中台转型，DDD将会是一把利器，它可以帮你建立一个非常好的企业级中台业务模型。有关这点你还会在后面的文章中见到详解。\n除此之外，DDD战术设计对设计和开发人员的要求相对较高，实现起来相对复杂。不同企业的研发管理能力和个人开发水平可能会存在差异。尤其对于传统企业而言，在战术设计落地的过程中，可能会存在一定挑战和困难，我建议你和你的公司如果有这方面的想法，就一定要谨慎评估自己的能力，选择最合适的方法落地DDD。\n也不妨根据收获权衡一下，总体来说，DDD可以给你带来以下收获：\nDDD是一套完整而系统的设计方法，它能带给你从战略设计到战术设计的标准设计过程，使得你的设计思路能够更加清晰，设计过程更加规范。 DDD善于处理与领域相关的拥有高复杂度业务的产品开发，通过它可以建立一个核心而稳定的领域模型，有利于领域知识的传递与传承。 DDD强调团队与领域专家的合作，能够帮助你的团队建立一个沟通良好的氛围，构建一致的架构体系。 DDD的设计思想、原则与模式有助于提高你的架构设计能力。 无论是在新项目中设计微服务，还是将系统从单体架构演进到微服务，都可以遵循DDD的架构原则。 DDD不仅适用于微服务，也适用于传统的单体应用。 ","permalink":"https://ximplez.github.io/topics/cs_tech/ddd_01/","summary":"DDD架构介绍","title":"DDD架构(一) -- DDD的历史和价值"},{"content":"Markdown 语法全攻略 Markdown 是一种轻量级标记语言，它以简洁、易读易写的特点受到了广大开发者和写作者的喜爱。本文将详细介绍 Markdown 的各种语法，包括标题、段落、列表、链接、图片、代码块等，并结合具体场景和示例进行展示。\n一、标题 Markdown 支持六级标题，分别用#的数量表示不同级别。\n#一级标题 ##二级标题 ###三级标题 以此类推，最多到六级标题。 示例:\n一级标题： markdown 1 # 这是一级标题 二级标题： markdown 1 ## 这是二级标题 三级标题： markdown 1 ### 这是三级标题 二、段落 语法介绍 段落之间用一个空行隔开。\n用法介绍 直接输入文本即可创建段落。\n具体示例及对应 Markdown 代码 markdown 1 2 3 这是第一个段落。 这是第二个段落。 三、列表 1. 无序列表 语法介绍：使用-、*或+作为无序列表的标记。 用法介绍：在标记后加上一个空格，然后输入列表项内容。 具体示例及对应 Markdown 代码： markdown 1 2 3 - 列表项 1 - 列表项 2 - 列表项 3 也可以使用*或+：\nmarkdown 1 2 3 * 列表项 1 * 列表项 2 * 列表项 3 markdown 1 2 3 + 列表项 1 + 列表项 2 + 列表项 3 2. 有序列表 语法介绍：使用数字加英文句号作为有序列表的标记。 用法介绍：数字后面加上一个英文句号和一个空格，然后输入列表项内容。列表项会自动按数字顺序排列。 具体示例及对应 Markdown 代码： markdown 1 2 3 1. 列表项 1 2. 列表项 2 3. 列表项 3 四、链接 语法介绍 链接的语法为[链接文本](链接地址)。\n用法介绍 可以直接使用 URL 作为链接地址。 也可以使用相对路径或绝对路径指向本地文件或其他资源。 具体示例及对应 Markdown 代码 链接到网页： markdown 1 [百度](https://www.baidu.com) 链接到本地文件（相对路径）： 假设在当前目录下有一个名为document.pdf的文件，可以这样链接： markdown 1 [文档](document.pdf) 五、图片 语法介绍 图片的语法为![图片替代文本](图片地址)。\n用法介绍 图片替代文本在图片无法加载时显示，也有助于提高可访问性。 图片地址可以是本地文件路径或网络 URL。 具体示例及对应 Markdown 代码 插入网络图片： markdown 1 ![可爱的猫咪](https://example.com/cat.jpg) 插入本地图片（相对路径）： 假设在当前目录下有一个名为image.png的图片，可以这样插入： markdown 1 ![美丽的风景](image.png) 六、强调 1. 斜体 语法介绍：使用*或_包裹需要强调的文本。 用法介绍：在文本前后分别加上一个*或_。 具体示例及对应 Markdown 代码： markdown 1 2 *这是斜体文本* _这也是斜体文本_ 2. 粗体 语法介绍：使用**或__包裹需要加粗的文本。 用法介绍：在文本前后分别加上两个*或_。 具体示例及对应 Markdown 代码： markdown 1 2 **这是粗体文本** __这也是粗体文本__ 3. 同时使用斜体和粗体 语法介绍：使用***或___包裹需要同时斜体和加粗的文本。 用法介绍：在文本前后分别加上三个*或_。 具体示例及对应 Markdown 代码： markdown 1 2 ***这是斜体加粗文本*** ___这也是斜体加粗文本___ 七、代码块 1. 行内代码 语法介绍：使用反引号（`）包裹行内代码。 用法介绍：在需要插入代码的地方使用反引号包裹代码。 具体示例及对应 Markdown 代码： markdown 1 这是一段包含行内代码的文本，比如`print(\u0026#34;Hello, World!\u0026#34;)`。 2. 代码块 语法介绍：使用三个反引号包裹代码块，并在开头的反引号后指定代码语言（可选）。 用法介绍：在需要插入代码块的地方，先输入三个反引号，然后在后面指定代码语言（如果需要语法高亮），接着输入代码，最后再输入三个反引号。 具体示例及对应 Markdown 代码： markdown 1 2 3 ```python def hello_world(): print(\u0026#34;Hello, World!\u0026#34;) 八、引用 语法介绍 引用的语法为\u0026gt; 加上引用的内容。\n用法介绍 可以嵌套引用，即一个引用中可以包含另一个引用。\n具体示例及对应 Markdown 代码 markdown 1 2 \u0026gt; 这是一个引用。 \u0026gt; \u0026gt; 这是一个嵌套引用。 九、分割线 语法介绍 可以使用三个以上的星号***、减号---或下划线___来创建分割线。\n用法介绍 在一行中单独输入这些符号即可创建分割线。\n具体示例及对应 Markdown 代码 markdown 1 2 3 *** --- ___ 十、表格 语法介绍 使用|来分隔表格的列，使用-来分隔表头和表体，使用:来对齐列。\n用法介绍 第一行是表头，用|分隔不同的列名。 第二行是分隔表头和表体的行，用-表示，并且可以在需要对齐的列名下面加上:来指定对齐方式（左对齐、右对齐或居中对齐）。 从第三行开始是表体内容，每行用|分隔不同的列值。 具体示例及对应 Markdown 代码 markdown 1 2 3 4 | 列 1 | 列 2 | 列 3 | | ---- | ----: | :----: | | 值 1 | 值 2 | 值 3 | | 值 4 | 值 5 | 值 6 | 十一、任务列表 语法介绍 任务列表的语法为- [ ]表示未完成的任务，- [x]表示已完成的任务。\n用法介绍 在-后面加上一个空格，然后是[ ]或[x]，再加上一个空格和任务描述。\n具体示例及对应 Markdown 代码 markdown 1 2 3 - [ ] 任务 1 - [x] 任务 2 - [ ] 任务 3 十二、总结 Markdown 语法简洁明了，易于掌握。通过本文的介绍，相信你已经对 Markdown 的各种语法有了更深入的了解。在实际使用中，可以根据不同的需求灵活运用这些语法，提高文档的编写效率和可读性。无论是写博客、做笔记还是编写技术文档，Markdown 都是一个非常实用的工具。\n","permalink":"https://ximplez.github.io/topics/notes/markdown/","summary":"Markdown语法全攻略","title":"Markdown语法全攻略"},{"content":"简介 本站使用Hugo搭建，主题fork了PaperMod-PE (Forked from Hugo-PaperMod )， 是本站基于 PaperMod 主题修改后的开源版本。作者博客：Tofuwine 最后本站主题开源地址：\nximplez/PaperMod-PE 站点源码不开放主要是因为有部分个人信息不方便开源\n优化左侧目录 原作者主题的左侧目录不能自适应屏幕宽度，当屏幕宽度过窄，目录就会被切出屏幕，且无法横向滑动屏幕来展示目录，体验不太好，因此参考toc优化 进行了魔改，融合两个目录的特点，实现自适应屏幕和样式优化。\nShortcode 记得在双括号内加 \u0026lt; \u0026gt;括起，否则不生效，以下代码块中无法加，否则会被渲染 引用 十里青山远，潮平路带沙。数声啼鸟怨年华。又是凄凉时候，在天涯。白露收残月，清风散晓霞。绿杨堤畔问荷花。记得年时沽酒，那人家。\nmarkdown 1 2 3 {{quote}} 十里青山远，潮平路带沙。数声啼鸟怨年华。又是凄凉时候，在天涯。白露收残月，清风散晓霞。绿杨堤畔问荷花。记得年时沽酒，那人家。 {{/quote}} admonition提示 success success admonition - success\nmarkdown 1 2 3 {{admonition type=success title=success open=true}} admonition - success {{/admonition}} note note admonition - note\nmarkdown 1 2 3 {{admonition type=note title=note open=true}} admonition - note {{/admonition}} abstract abstract admonition - abstract\nmarkdown 1 2 3 {{ admonition type=abstract title=abstract open=true }} admonition - abstract {{/admonition}} info info admonition - info\nmarkdown 1 2 3 {{ admonition type=info title=info open=true }} admonition - info {{/admonition}} tip tip admonition - tip\nmarkdown 1 2 3 {{ admonition type=tip title=tip open=true }} admonition - tip {{/admonition}} question question admonition - question\nmarkdown 1 2 3 {{ admonition type=question title=question open=true }} admonition - question {{/admonition}} warning warning admonition - warning\nmarkdown 1 2 3 {{ admonition type=warning title=warning open=true }} admonition - warning {{/admonition}} failure failure admonition - failure\nmarkdown 1 2 3 {{ admonition type=failure title=failure open=true }} admonition - failure {{/admonition}} danger danger admonition - danger\nmarkdown 1 2 3 {{ admonition type=danger title=danger open=true }} admonition - danger {{/admonition}} bug bug admonition - bug\nmarkdown 1 2 3 {{ admonition type=bug title=bug open=true }} admonition - bug {{/admonition}} example example admonition - example\nmarkdown 1 2 3 {{ admonition type=example title=example open=true }} admonition - example {{/admonition}} quote quote admonition - quote\nmarkdown 1 2 3 {{ admonition type=quote title=quote open=true }} admonition - quote {{/admonition}} tip提示 info tip content\nmarkdown 1 2 3 {{tip}} tip content {{/tip}} warning tip content\nmarkdown 1 2 3 {{tip warning}} tip content {{/tip}} badge徽章 PaperMod-PE v1.0.4 ximplez building markdown 1 {{ badge \u0026#34;PaperMod-PE\u0026#34; \u0026#34;v1.0.4\u0026#34; }} ","permalink":"https://ximplez.github.io/topics/operates/build-gh-pages-1/","summary":"博客主题优化","title":"Hugo博客 Log-1"},{"content":"正则表达式详解 正则表达式是一种强大的文本模式匹配工具，广泛应用于各种编程语言和文本处理软件中。它可以用来搜索、替换和验证文本。本文将介绍正则表达式的常用语法、示例以及一些常用表达式。\n一、正则表达式基础 1. 字符匹配 普通字符：直接匹配自身。例如，正则表达式apple可以匹配字符串中的apple。 特殊字符：具有特殊含义，如.*?+()[]{}|等。需要使用反斜杠\\进行转义才能匹配其本身。例如，\\*匹配*字符。 2. 元字符 .：匹配任意单个字符。例如，a.ple可以匹配apple、ample等。 \\d：匹配一个数字字符。例如，\\d\\d-\\d\\d-\\d\\d\\d\\d可以匹配日期格式，如12-30-2023。 \\w：匹配一个字母、数字或下划线字符。例如，\\w\\w\\w\\w可以匹配abcd、a12_等。 \\s：匹配一个空白字符，包括空格、制表符、换行符等。例如，Hello\\sWorld可以匹配Hello World。 3. 量词 *：匹配前面的字符零次或多次。例如，a*b可以匹配b、ab、aab等。 +：匹配前面的字符一次或多次。例如，a+b可以匹配ab、aab等，但不能匹配b。 ?：匹配前面的字符零次或一次。例如，a?b可以匹配b或ab。 {n}：匹配前面的字符恰好n次。例如，a{3}b可以匹配aaab。 {n,}：匹配前面的字符至少n次。例如，a{2,}b可以匹配aab、aaab等。 {n,m}：匹配前面的字符至少n次，至多m次。例如，a{2,4}b可以匹配aab、aaab、aaaab。 4. 分组和捕获 ()：用于分组。可以将多个字符组合在一起作为一个整体进行匹配。例如，(ab)+c可以匹配abc、ababc等。 (?:)：非捕获分组。与普通分组类似，但不会捕获匹配的内容。例如，(?:ab)+c只匹配abc、ababc等，但不会捕获ab。 \\1、\\2等：引用捕获组。可以在正则表达式中引用之前捕获的内容。例如，(\\w)\\1可以匹配aa、bb等。 5. 锚点 ^：匹配字符串的开头。例如，^Hello只能匹配以Hello开头的字符串。 $：匹配字符串的结尾。例如，World$只能匹配以World结尾的字符串。 二、正则表达式示例 1. 验证电子邮件地址 regex 1 ^\\w+([-+.\u0026#39;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$ 这个正则表达式可以验证一个字符串是否是有效的电子邮件地址。它匹配以字母、数字或下划线开头，后面跟着零个或多个由连字符、加号、点号或单引号分隔的字母、数字或下划线，然后是一个@符号，接着是一个或多个由连字符或点号分隔的域名部分，最后是一个点号和一个顶级域名。\n例如：\npython 1 2 3 4 5 6 7 8 import re email = \u0026#34;test@example.com\u0026#34; pattern = r\u0026#34;^\\w+([-+.\u0026#39;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\u0026#34; if re.match(pattern, email): print(\u0026#34;Valid email address\u0026#34;) else: print(\u0026#34;Invalid email address\u0026#34;) 2. 提取电话号码 regex 1 \\d{3}-\\d{3}-\\d{4} 这个正则表达式可以匹配美国电话号码格式，即三个数字、一个连字符、三个数字、一个连字符和四个数字。\n例如：\npython 1 2 3 4 5 6 import re text = \u0026#34;My phone number is 123-456-7890.\u0026#34; pattern = r\u0026#34;\\d{3}-\\d{3}-\\d{4}\u0026#34; matches = re.findall(pattern, text) print(matches) 3. 匹配 HTML 标签 regex 1 \u0026lt;(\\w+)\\b[^\u0026gt;]*\u0026gt;(.*?)\u0026lt;/\\1\u0026gt; 这个正则表达式可以匹配 HTML 标签，包括开始标签和结束标签，并捕获标签名和标签内容。\n例如：\npython 1 2 3 4 5 6 import re html = \u0026#34;\u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt;\u0026#34; pattern = r\u0026#34;\u0026lt;(\\w+)\\b[^\u0026gt;]*\u0026gt;(.*?)\u0026lt;/\\1\u0026gt;\u0026#34; matches = re.findall(pattern, html) print(matches) 三、常用正则表达式 1. 用户名 字母、数字、下划线组成，长度为 3 到 20 个字符：^\\w{3,20}$ 2. 密码 至少包含一个大写字母、一个小写字母、一个数字和一个特殊字符，长度为 8 到 20 个字符：^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!@#$%^\u0026amp;*])\\w{8,20}$ 3. URL 匹配基本的 URL 格式：^(https?|ftp)://[^\\s/$.?#].[^\\s]*$ 4. 日期 匹配 YYYY-MM-DD 格式的日期：^\\d{4}-\\d{2}-\\d{2}$ 5. 整数 匹配整数：^\\d+$ 6. 浮点数 匹配浮点数：^\\d+\\.\\d+$ 四、总结 正则表达式是一种非常强大的工具，可以用于各种文本处理任务。本文介绍了正则表达式的常用语法、示例以及一些常用表达式。掌握正则表达式可以提高文本处理的效率和准确性。在实际应用中，可以根据具体需求灵活运用正则表达式，以实现更复杂的文本匹配和处理任务。\n","permalink":"https://ximplez.github.io/topics/notes/regex/","summary":"正则表达式是一种强大的文本模式匹配工具，广泛应用于各种编程语言和文本处理软件中。它可以用来搜索、替换和验证文本。本文将介绍正则表达式的常用语法、示例以及一些常用表达式。","title":"Regex正则表达式攻略"},{"content":"Git 日常使用技巧 在软件开发过程中，Git 是一个非常强大的版本控制工具。掌握一些 Git 的日常使用技巧，可以提高开发效率，减少错误。本文将介绍一些 Git 的日常使用技巧，并通过示例来说明它们的使用方式。\n一、基本概念 在介绍 Git 技巧之前，我们先来回顾一下一些基本概念。\n仓库（Repository）：一个包含了项目所有文件和历史记录的目录。 提交（Commit）：将代码的更改保存到仓库中，形成一个新的版本。 分支（Branch）：在同一仓库中，可以创建多个分支，每个分支代表一个独立的开发线路。 合并（Merge）：将一个分支的更改合并到另一个分支中。 拉取（Pull）：从远程仓库获取最新的代码更改。 推送（Push）：将本地仓库的更改推送到远程仓库。 二、常用技巧 查看提交历史 使用git log命令可以查看仓库的提交历史。这个命令会显示每个提交的哈希值、作者、日期和提交消息。\n例如：\nbash 1 git log 可以使用--oneline选项来显示简洁的提交历史：\nbash 1 git log --oneline 撤销未提交的更改 如果你对代码进行了一些更改，但还没有提交，可以使用git checkout命令来撤销这些更改。\n例如，如果你想撤销对一个文件的更改：\nbash 1 git checkout -- filename 如果你想撤销所有未提交的更改：\nbash 1 git checkout --. 暂存部分更改 有时候，你可能只想暂存一部分更改，而不是全部提交。可以使用git add -p命令来交互式地暂存更改。\n例如：\nbash 1 git add -p 这个命令会逐个显示文件中的更改，你可以选择暂存或跳过每个更改。\n忽略文件 在项目中，有些文件不需要被版本控制，比如临时文件、编译生成的文件等。可以在仓库的根目录下创建一个.gitignore文件，列出这些不需要被版本控制的文件和目录。\n例如：\nplaintext 1 2 3 *.log temp/ build/ 分支管理 创建分支：使用git branch命令可以创建一个新分支。\n例如：\nbash 1 git branch new-branch 切换分支：使用git checkout命令可以切换到一个已有的分支。\n例如：\nbash 1 git checkout new-branch 合并分支：使用git merge命令可以将一个分支的更改合并到另一个分支中。\n例如：\nbash 1 2 git checkout master git merge new-branch 解决合并冲突 当两个分支对同一个文件进行了不同的更改时，合并时可能会出现冲突。Git 会在冲突的文件中标记出冲突的部分，你需要手动解决这些冲突，然后使用git add命令将解决后的文件暂存起来，最后使用git commit命令提交合并。\n例如：\nbash 1 2 3 4 git merge new-branch # 解决冲突 git add filename git commit 拉取远程仓库的最新更改 使用git pull命令可以从远程仓库获取最新的代码更改，并合并到当前分支中。\n例如：\nbash 1 git pull origin master 推送本地仓库的更改到远程仓库 使用git push命令可以将本地仓库的更改推送到远程仓库。\n例如：\nbash 1 git push origin master 查看分支差异 使用git diff命令可以查看两个分支之间的差异。\n例如，查看当前分支和master分支之间的差异：\nbash 1 git diff master 查看文件的历史版本 使用git log -p filename命令可以查看一个文件的历史版本。\n例如：\nbash 1 git log -p filename 恢复到特定的提交 如果你想恢复到仓库的某个特定提交，可以使用git reset命令。\n例如，恢复到上一个提交：\nbash 1 git reset --hard HEAD^ 如果你想恢复到特定的提交哈希值：\nbash 1 git reset --hard commit-hash 重命名分支 使用git branch -m命令可以重命名当前分支。\n例如：\nbash 1 git branch -m new-name 删除分支 使用git branch -d命令可以删除一个已合并的分支。如果分支未合并，需要使用-D选项强制删除。\n例如：\nbash 1 2 3 git branch -d branch-name # 强制删除未合并的分支 git branch -D branch-name 标记版本 使用git tag命令可以为特定的提交打标签，以便于标记重要的版本。\n例如：\nbash 1 2 git tag v1.0 git push origin v1.0 查看远程仓库信息 使用git remote -v命令可以查看远程仓库的名称和 URL。\n例如：\nbash 1 git remote -v 三、总结 Git 是一个非常强大的版本控制工具，掌握一些日常使用技巧可以提高开发效率。本文介绍了一些 Git 的常用技巧，包括查看提交历史、撤销未提交的更改、暂存部分更改、分支管理、解决合并冲突、拉取和推送更改、查看分支差异、查看文件的历史版本、恢复到特定的提交、重命名分支、删除分支、标记版本和查看远程仓库信息等。希望这些技巧对你有所帮助。\n","permalink":"https://ximplez.github.io/topics/notes/git/","summary":"在软件开发过程中，Git 是一个非常强大的版本控制工具。掌握一些 Git 的日常使用技巧，可以提高开发效率，减少错误。本文将介绍一些 Git 的日常使用技巧，并通过示例来说明它们的使用方式。","title":"Git日常使用技巧详解"},{"content":"小技巧 日常使用 终端指定编辑器打开文件/文件夹（vscode为例）\nshell 1 open /opt/homebrew/etc/nginx -a \u0026#39;Visual Studio Code\u0026#39; 提示\n针对vscode更便捷的方式： 打开vscode命令cmd+shift+p，输入shell，选择Install 'code' command in PATH，就可以在path中自动安装code命令，之后就可以直接用code命令打开文件/文件夹\nshell 1 code /opt/homebrew/etc/nginx 查看进程\nshell 1 ps -ef | grep nginx 查看端口占用\nshell 1 2 3 4 5 6 7 8 9 lsof -i:8080：查看8080端口占用 lsof abc.txt：显示开启文件abc.txt的进程 lsof -c abc：显示abc进程现在打开的文件 lsof -c -p 1234：列出进程号为1234的进程所打开的文件 lsof -g gid：显示归属gid的进程情况 lsof +d /usr/local/：显示目录下被进程开启的文件 lsof +D /usr/local/：同上，但是会搜索目录下的目录，时间较长 lsof -d 4：显示使用fd为4的进程 lsof -i -U：显示所有打开的端口和UNIX domain文件 netstat -tunlp 用于显示 tcp，udp 的端口和进程等相关情况。\nnetstat 查看端口占用语法格式：\nshell 1 netstat -tunlp | grep 端口号 -t (tcp) 仅显示tcp相关选项 -u (udp)仅显示udp相关选项 -n 拒绝显示别名，能显示数字的全部转化为数字l -l 仅列出在Listen(监听)的服务状态 -p 显示建立相关链接的程序名 ","permalink":"https://ximplez.github.io/topics/notes/mac_trick/","summary":"记录个人使用心得","title":"Mac技巧"},{"content":"github 手动release发布：掘金 ","permalink":"https://ximplez.github.io/topics/notes/go_post_module/","summary":"go发布module","title":"go发布module"}]