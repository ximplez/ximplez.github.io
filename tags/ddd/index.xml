<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DDD on ximplez</title>
    <link>https://ximplez.github.io/tags/ddd/</link>
    <description>Recent content in DDD on ximplez</description>
    <image>
      <title>ximplez</title>
      <url>https://ximplez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ximplez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.139.2</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 13 Dec 2024 11:47:39 +0800</lastBuildDate>
    <atom:link href="https://ximplez.github.io/tags/ddd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DDD架构(四) -- 实体和值对象</title>
      <link>https://ximplez.github.io/topics/cs_tech/ddd_04/</link>
      <pubDate>Wed, 11 Dec 2024 13:50:03 +0800</pubDate>
      <guid>https://ximplez.github.io/topics/cs_tech/ddd_04/</guid>
      <description>DDD架构介绍</description>
      <content:encoded><![CDATA[<h1 id="实体和值对象">实体和值对象</h1>
<p>今天我们来看看DDD战术设计中的两个重要概念：<strong>实体</strong>和<strong>值对象</strong>。</p>
<p>这两个概念都是领域模型中的领域对象。它们在领域模型中起什么作用，战术设计时如何将它们映射到代码和数据模型中去？就是我们这里重点要关注的问题。</p>
<p>另外，在战略设计向战术设计过渡的这个过程中，理解和区分实体和值对象在不同阶段的形态是很重要的，毕竟阶段不同，它们的形态也会发生变化，这与我们的设计和代码实现密切相关。</p>
<p>接下来，我们就分别看看实体和值对象的这些问题，从中找找答案。</p>
<hr>
<h2 id="实体">实体</h2>
<p>我们先来看一下实体是什么东西？</p>
<div class="pe-details admonition tip open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-lightbulb fa-fw"
           aria-hidden="true"></i>实体<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                     aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content">在DDD中有这样一类对象，它们拥有唯一标识符，且标识符在历经各种状态变更后仍能保持一致。<strong>对这些对象而言，重要的不是其属性，而是其延续性和标识，对象的延续性和标识会跨越甚至超出软件的生命周期。</strong> 我们把这样的对象称为<code>实体</code>。</div>
    </div>
</div>
<h3 id="1-实体的业务形态">1. 实体的业务形态</h3>
<p>在DDD不同的设计过程中，实体的形态是不同的。</p>





<div class="pe-tip ">
    <ul>
<li>在战略设计时，实体是领域模型的一个重要对象。领域模型中的实体是多个属性、操作或行为的载体。</li>
<li>在事件风暴中，我们可以根据命令、操作或者事件，找出产生这些行为的业务实体对象，进而按照一定的业务规则将依存度高和业务关联紧密的多个实体对象和值对象进行聚类，形成聚合。</li>
</ul>

</div>

<p>你可以这么理解，实体和值对象是组成领域模型的基础单元。</p>
<h3 id="2-实体的代码形态">2. 实体的代码形态</h3>
<p>在代码模型中，实体的表现形式是实体类，这个类包含了实体的属性和方法，通过这些方法实现实体自身的业务逻辑。</p>
<p>在DDD里，这些实体类通常采用<code>充血模型</code>，与这个实体相关的所有业务逻辑都在实体类的方法中实现，跨多个实体的领域逻辑则在领域服务中实现。</p>
<h3 id="3-实体的运行形态">3. 实体的运行形态</h3>
<p>实体以DO（领域对象）的形式存在，每个实体对象都有<strong>唯一的ID</strong>。我们可以对一个实体对象进行多次修改，修改后的数据和原来的数据可能会大不相同。但是，由于它们拥有相同的ID，它们依然是同一个实体。比如商品是商品上下文的一个实体，通过唯一的商品ID来标识，不管这个商品的数据如何变化，商品的ID一直保持不变，它始终是同一个商品。</p>
<h3 id="4-实体的数据库形态">4. 实体的数据库形态</h3>
<p>与传统数据模型设计优先不同，DDD是先构建领域模型，针对实际业务场景构建实体对象和行为，再将实体对象映射到数据持久化对象。</p>
<p>在领域模型映射到数据模型时，一个实体可能对应0个、1个或者多个数据库持久化对象。大多数情况下实体与持久化对象是一对一。在某些场景中，有些实体只是暂驻静态内存的一个运行态实体，它不需要持久化。比如，基于多个价格配置数据计算后生成的折扣实体。</p>
<p>而在有些复杂场景下，实体与持久化对象则可能是一对多或者多对一的关系。比如，用户user与角色role两个持久化对象可生成权限实体，一个实体对应两个持久化对象，这是一对多的场景。再比如，有些场景为了避免数据库的联表查询，提升系统性能，会将客户信息customer和账户信息account两类数据保存到同一张数据库表中，客户和账户两个实体可根据需要从一个持久化对象中生成，这就是多对一的场景。</p>
<hr>
<h2 id="值对象">值对象</h2>
<p>值对象相对实体来说，会更加抽象一些，概念上我们会结合例子来讲。</p>
<p>我们先看一下《实现领域驱动设计》一书中对值对象的定义：</p>
<div class="pe-details admonition quote open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-quote-right fa-fw"
           aria-hidden="true"></i>值对象的定义<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                     aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content">通过对象属性值来识别的对象，它将多个相关属性组合为一个概念整体。在DDD中用来描述领域的特定方面，并且是一个没有标识符的对象，叫作值对象。</div>
    </div>
</div>
<p>也就说，值对象描述了领域中的一件东西，这个东西是不可变的，它将不同的相关属性组合成了一个概念整体。当度量和描述改变时，可以用另外一个值对象予以替换。它可以和其它值对象进行相等性比较，且不会对协作对象造成副作用。这部分在后面讲“值对象的运行形态”时还会有例子。</p>
<p>上面这两段对于定义的阐述，如果你还是觉得有些晦涩，我们不妨“翻译”一下，用更通俗的语言把定义讲清楚。</p>





<div class="pe-tip ">
    简单来说，值对象本质上就是一个集。那这个集合里面有什么呢？若干个用于描述目的、具有整体概念和不可修改的属性。那这个集合存在的意义又是什么？在领域建模的过程中，值对象可以保证属性归类的清晰和概念的完整性，避免属性零碎。
</div>

<p>这里我举个简单的例子，请看下面这张图：</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241212135619910.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241212135619910.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<p>人员实体原本包括：姓名、年龄、性别以及人员所在的省、市、县和街道等属性。这样显示地址相关的属性就很零碎了对不对？现在，我们可以将“省、市、县和街道等属性”拿出来构成一个“地址属性集合”，这个集合就是<code>值对象</code>了。</p>
<h3 id="1-值对象的业务形态">1. 值对象的业务形态</h3>
<p>值对象是DDD领域模型中的一个基础对象，它跟实体一样都来源于事件风暴所构建的领域模型，都包含了若干个属性，它与实体一起构成聚合。</p>





<div class="pe-tip ">
    我们不妨对照实体，来看值对象的业务形态，这样更好理解。本质上，实体是看得到、摸得着的实实在在的业务对象，实体具有业务属性、业务行为和业务逻辑。而值对象只是若干个属性的集合，只有数据初始化操作和有限的不涉及修改数据的行为，基本不包含业务逻辑。值对象的属性集虽然在物理上独立出来了，但在逻辑上它仍然是实体属性的一部分，用于描述实体的特征。
</div>

<p>在值对象中也有部分共享的标准类型的值对象，它们有自己的限界上下文，有自己的持久化对象，可以建立共享的数据类微服务，比如数据字典。</p>
<h3 id="2-值对象的代码形态">2. 值对象的代码形态</h3>
<p>值对象在代码中有这样两种形态。如果值对象是单一属性，则直接定义为实体类的属性；如果值对象是属性集合，则把它设计为Class类，Class将具有整体概念的多个属性归集到属性集合，这样的值对象没有ID，会被实体整体引用。</p>





<div class="pe-tip warning">
    我们看一下下面这段代码，person这个实体有若干个单一属性的值对象，比如Id、name等属性；同时它也包含多个属性的值对象，比如地址address。
</div>

<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241213104059090.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241213104059090.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<h3 id="3-值对象的运行形态">3. 值对象的运行形态</h3>
<p>实体实例化后的DO对象的业务属性和业务行为非常丰富，但值对象实例化的对象则相对简单和乏味。除了值对象数据初始化和整体替换的行为外，其它业务行为就很少了。</p>
<p>值对象嵌入到实体的话，有这样两种不同的数据格式，也可以说是两种方式，分别是<code>属性嵌入</code>的方式和<code>序列化大对象</code>的方式。</p>





<div class="pe-tip ">
    引用单一属性的值对象或只有一条记录的多属性值对象的实体，可以采用属性嵌入的方式嵌入。引用一条或多条记录的多属性值对象的实体，可以采用序列化大对象的方式嵌入。比如，人员实体可以有多个通讯地址，多个地址序列化后可以嵌入人员的地址属性。值对象创建后就不允许修改了，只能用另外一个值对象来整体替换。
</div>

<p><strong>如果你对这两种方式不够了解，可以看看下面的例子。</strong></p>
<p>案例1：以属性嵌入的方式形成的人员实体对象，地址值对象直接以属性值嵌入人员实体中。</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241213104327504.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241213104327504.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<p>案例2：以序列化大对象的方式形成的人员实体对象，地址值对象被序列化成大对象Json串后，嵌入人员实体中。</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241213104343364.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241213104343364.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<h3 id="4-值对象的数据库形态">4. 值对象的数据库形态</h3>
<p>DDD引入值对象是希望实现从“数据建模为中心”向“领域建模为中心”转变，减少数据库表的数量和表与表之间复杂的依赖关系，尽可能地简化数据库设计，提升数据库性能。</p>
<p><strong>如何理解用值对象来简化数据库设计呢？</strong></p>
<p>传统的数据建模大多是根据数据库范式设计的，每一个数据库表对应一个实体，每一个实体的属性值用单独的一列来存储，一个实体主表会对应N个实体从表。而值对象在数据库持久化方面简化了设计，它的数据库设计大多采用非数据库范式，值对象的属性值和实体对象的属性值保存在同一个数据库实体表中。</p>
<div class="pe-details admonition example open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-list-ol fa-fw"
           aria-hidden="true"></i>模型设计<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                     aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content"><p>举个例子，还是基于上述人员和地址那个场景，实体和数据模型设计通常有两种解决方案：</p>
<ul>
<li>第一是把地址值对象的所有属性都放到人员实体表中，创建人员实体，创建人员数据表；</li>
<li>第二是创建人员和地址两个实体，同时创建人员和地址两张表。</li>
</ul>
<p>第一个方案会破坏地址的业务涵义和概念完整性，第二个方案增加了不必要的实体和表，需要处理多个实体和表的关系，从而增加了数据库设计的复杂性。</p>
</div>
    </div>
</div>
<p><strong>那到底应该怎样设计，才能让业务含义清楚，同时又不让数据库变得复杂呢？</strong></p>
<p>我们可以综合这两个方案的优势，扬长避短。在领域建模时，我们可以把地址作为值对象，人员作为实体，这样就可以保留地址的业务涵义和概念完整性。而在数据建模时，我们可以将地址的属性值嵌入人员实体数据库表中，只创建人员数据库表。这样既可以兼顾业务含义和表达，又不增加数据库的复杂度。</p>
<div class="pe-details admonition success open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-check-circle fa-fw"
           aria-hidden="true"></i>建模设计<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                     aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content">值对象就是通过这种方式，简化了数据库设计，总结一下就是：在领域建模时，我们可以将部分对象设计为值对象，保留对象的业务涵义，同时又减少了实体的数量；在数据建模时，我们可以将值对象嵌入实体，减少实体表的数量，简化数据库设计。</div>
    </div>
</div>
<p>另外，也有DDD专家认为，要想发挥对象的威力，就需要优先做领域建模，弱化数据库的作用，只把数据库作为一个保存数据的仓库即可。即使违反数据库设计原则，也不用大惊小怪，只要业务能够顺利运行，就没什么关系。</p>
<h3 id="5-值对象的优势和局限">5. 值对象的优势和局限</h3>
<blockquote>
<p>值对象是一把双刃剑，它的优势是可以简化数据库设计，提升数据库性能。但如果值对象使用不当，它的优势就会很快变成劣势。“知彼知己，方能百战不殆”，你需要理解值对象真正适合的场景。</p>
</blockquote>
<p>值对象采用序列化大对象的方法简化了数据库设计，减少了实体表的数量，可以简单、清晰地表达业务概念。这种设计方式虽然降低了数据库设计的复杂度，但却无法满足基于值对象的快速查询，会导致搜索值对象属性值变得异常困难。</p>
<p>值对象采用属性嵌入的方法提升了数据库的性能，但如果实体引用的值对象过多，则会导致实体堆积一堆缺乏概念完整性的属性，这样值对象就会失去业务涵义，操作起来也不方便。</p>
<p>所以，你可以对照着以上这些优劣势，结合你的业务场景，好好想一想了。那如果在你的业务场景中，值对象的这些劣势都可以避免掉，那就请放心大胆地使用值对象吧。</p>
<h2 id="实体和值对象的关系">实体和值对象的关系</h2>
<p>实体和值对象是微服务底层的最基础的对象，一起实现实体最基本的核心领域逻辑。</p>





<div class="pe-tip ">
    值对象和实体在某些场景下可以互换，很多DDD专家在这些场景下，其实也很难判断到底将领域对象设计成实体还是值对象？可以说，值对象在某些场景下有很好的价值，但是并不是所有的场景都适合值对象。你需要根据团队的设计和开发习惯，以及上面的优势和局限分析，选择最适合的方法。
</div>

<p>关于值对象，我还要多说几句。其实，DDD引入值对象还有一个重要的原因，就是到底领域建模优先还是数据建模优先？</p>
<p><strong>DDD提倡从领域模型设计出发，而不是先设计数据模型。</strong> 前面讲过了，传统的数据模型设计通常是一个表对应一个实体，一个主表关联多个从表，当实体表太多的时候就很容易陷入无穷无尽的复杂的数据库设计，领域模型就很容易被数据模型绑架。可以说，值对象的诞生，在一定程度上，和实体是互补的。</p>
<p>我们还是以前面的图示为例：</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241213114520214.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241213114520214.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<p>在领域模型中人员是实体，地址是值对象，地址值对象被人员实体引用。在数据模型设计时，地址值对象可以作为一个属性集整体嵌入人员实体中，组合形成上图这样的数据模型；也可以以序列化大对象的形式加入到人员的地址属性中，前面表格有展示。</p>
<p>从这个例子中，我们可以看出，同样的对象在不同的场景下，可能会设计出不同的结果。</p>
<blockquote>
<p>有些场景中，地址会被某一实体引用，它只承担描述实体的作用，并且它的值只能整体替换，这时候你就可以将地址设计为值对象，比如收货地址。而在某些业务场景中，地址会被经常修改，地址是作为一个独立对象存在的，这时候它应该设计为实体，比如行政区划中的地址信息维护。</p>
</blockquote>
<hr>
<h2 id="总结">总结</h2>
<p>今天我们主要学习了实体和值对象在DDD不同设计阶段的形态，以及它们从战略设计向战术设计演进过程中的设计方法。</p>
<p>这个过程是从业务模型向系统模型落地的过程，比较复杂，很考验你的设计能力，很多时候我们都要结合自己的业务场景，选择合适的方法来进行微服务设计。强调一点，我们不避讳传统的设计方法，毕竟适合自己的才是最好的。希望你能充分理解实体和值对象的概念和应用，将学到的知识复用，最终将适合自己业务的DDD设计方法纳入到架构体系，实现落地。</p>
]]></content:encoded>
    </item>
    <item>
      <title>DDD架构(三) -- 通用语言和限界上下文</title>
      <link>https://ximplez.github.io/topics/cs_tech/ddd_03/</link>
      <pubDate>Mon, 09 Dec 2024 13:58:25 +0800</pubDate>
      <guid>https://ximplez.github.io/topics/cs_tech/ddd_03/</guid>
      <description>DDD架构介绍</description>
      <content:encoded><![CDATA[<h1 id="通用语言和限界上下文">通用语言和限界上下文</h1>
<p>在DDD领域建模和系统建设过程中，有很多的参与者，包括领域专家、产品经理、项目经理、架构师、开发经理和测试经理等。对同样的领域知识，不同的参与角色可能会有不同的理解，那大家交流起来就会有障碍，怎么办呢？因此，在DDD中就出现了<code>“通用语言”</code>和<code>“限界上下文”</code>这两个重要的概念。</p>





<div class="pe-tip warning">
    这两者相辅相成，<strong>通用语言定义上下文含义，限界上下文则定义领域边界</strong>，以确保每个上下文含义在它特定的边界内都具有唯一的含义，领域模型则存在于这个边界之内。你是不是感觉这么描述很抽象？没关系，接下来我会给你一一详细讲解。
</div>

<p>在这之前，我想请你先看这样两个问题，这也是今天内容的核心。</p>
<ol>
<li><strong>为什么要提出限界上下文的概念（也就是说除了解决交流障碍这个广义的原因，还有更具体的吗）？</strong></li>
<li><strong>限界上下文在微服务设计中的作用和意义是什么？</strong></li>
</ol>
<hr>
<h2 id="什么是通用语言">什么是通用语言？</h2>
<p>为了更好地理解限界上下文，回答这两个问题，我们先从通用语言讲起。怎么理解<code>通用语言</code>这个概念呢？</p>
<div class="pe-details admonition question open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-question-circle fa-fw"
           aria-hidden="true"></i>什么是通用语音<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                           aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content"><strong>在事件风暴过程中，通过团队交流达成共识的，能够简单、清晰、准确描述业务涵义和规则的语言</strong>就是通用语言。也就是说，通用语言是团队统一的语言，不管你在团队中承担什么角色，在同一个领域的软件生命周期里都使用统一的语言进行交流。</div>
    </div>
</div>





<div class="pe-tip ">
    那么，通用语言的价值也就很明了了，它可以解决交流障碍这个问题，使领域专家和开发人员能够协同合作，从而确保业务需求的正确表达。
</div>




    


<span style="color: #e96725"><strong>但是，对这个概念的理解，到这里还不够。</strong></span>
<p>通用语言包含术语和用例场景，并且能够直接反映在代码中。通用语言中的名词可以给领域对象命名，如商品、订单等，对应实体对象；而动词则表示一个动作或事件，如商品已下单、订单已付款等，对应领域事件或者命令。</p>
<div class="pe-details admonition tip open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-lightbulb fa-fw"
           aria-hidden="true"></i>通用语言<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                           aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content">通用语言贯穿DDD的整个设计过程。作为项目团队沟通和协商形成的统一语言，基于它，你就能够开发出可读性更好的代码，将业务需求准确转化为代码设计。</div>
    </div>
</div>
<p>下面我带你看一张图，这张图描述了从<code>事件风暴</code>建立<code>通用语言</code>到<code>领域对象设计</code>和<code>代码落地</code>的完整过程。</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241209160626704.png">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241209160626704.png#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<ol>
<li>在事件风暴的过程中，领域专家会和设计、开发人员一起建立领域模型，在领域建模的过程中会形成通用的业务术语和用户故事。<strong>事件风暴也是一个项目团队统一语言的过程</strong>。</li>
<li>通过用户故事分析会形成一个个的领域对象，这些领域对象对应领域模型的业务对象，每一个业务对象和领域对象都有通用的名词术语，并且一一映射。</li>
<li>微服务代码模型来源于领域模型，每个代码模型的代码对象跟领域对象一一对应。</li>
</ol>





<div class="pe-tip warning">
    <p>这里我再给你分享一条经验，我自己经常用，特别有效。</p>
<p><strong>设计过程中我们可以用一些表格，来记录事件风暴和微服务设计过程中产生的领域对象及其属性。比如，领域对象在DDD分层架构中的位置、属性、依赖关系以及与代码模型对象的映射关系等。</strong></p>

</div>

<p>下面是一个微服务设计实例的部分数据，表格中的这些名词术语就是项目团队在事件风暴过程中达成一致、可用于团队内部交流的通用语言。</p>
<p>在这个表格里面我们可以看到，DDD分析过程中所有的领域对象以及它们的属性都被记录下来了，除了DDD的领域对象，我们还记录了在微服务设计过程中领域对象所对应的代码对象，并将它们一一映射。</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241209161700770.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241209161700770.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<p>到这里，我要再强调一次。


    


<span style="color: #e96725"><strong>DDD分析和设计过程中的每一个环节都需要保证限界上下文内术语的统一，在代码模型设计的时侯就要建立领域对象和代码对象的一一映射，从而保证业务模型和代码模型的一致，实现业务语言与代码语言的统一。</strong></span></p>





<div class="pe-tip ">
    如果你做到了这一点，也就是建立了领域对象和代码对象的映射关系，那就可以指导软件开发人员准确无误地按照设计文档完成微服务开发了。即使是不熟悉代码的业务人员，也可以很快找到代码的位置。
</div>

<hr>
<h2 id="什么是限界上下文">什么是限界上下文？</h2>
<p>那刚刚提到的限界上下文又是用来做什么的呢？</p>
<p>我们知道语言都有它的语义环境，同样，通用语言也有它的上下文环境。为了避免同样的概念或语义在不同的上下文环境中产生歧义，DDD在战略设计上提出了“<code>限界上下文</code>”这个概念，用来确定语义所在的领域边界。</p>
<p>我们可以将限界上下文拆解为两个词：<strong><code>限界</code></strong> 和 <strong><code>上下文</code></strong>。<strong>限界就是领域的边界，而上下文则是语义环境</strong>。通过领域的限界上下文，我们就可以在统一的领域边界内用统一的语言进行交流。</p>
<div class="pe-details admonition success open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-check-circle fa-fw"
           aria-hidden="true"></i>限界上下文的定义<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                     aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content">综合一下，我认为限界上下文的定义就是：<strong>用来封装通用语言和领域对象，提供上下文环境，保证在领域之内的一些术语、业务相关对象等（通用语言）有一个确切的含义，没有二义性。这个边界定义了模型的适用范围，使团队所有成员能够明确地知道什么应该在模型中实现，什么不应该在模型中实现。</strong></div>
    </div>
</div>
<h3 id="进一步理解限界上下文">进一步理解限界上下文</h3>
<p>我们可以通过一些例子进一步理解一下这个概念，不要小看它，彻底弄懂会给你后面实践DDD打下一个坚实的基础。</p>
<p>都说中文这门语言非常丰富，在不同的时空和背景下，同样的一句话会有不同的涵义。有一个例子你应该听说过。</p>





<div class="pe-tip warning">
    <p>在一个明媚的早晨，孩子起床问妈妈：“今天应该穿几件衣服呀？”妈妈回答：“能穿多少就穿多少！”</p>
<p><strong>那到底是穿多还是穿少呢？</strong></p>
<p>如果没有具体的语义环境，还真不太好理解。但是，如果你已经知道了这句话的语义环境，比如是寒冬腊月或者是炎炎夏日，那理解这句话的涵义就会很容易了。</p>

</div>




    


<span style="color: #165ddc"><strong>所以语言离不开它的语义环境。</strong></span>
<p>而业务的通用语言就有它的业务边界，我们不大可能用一个简单的术语没有歧义地去描述一个复杂的业务领域。<code>限界上下文就是用来细分领域，从而定义通用语言所在的边界</code>。</p>
<p>现在我们用一个保险领域的例子来说明下术语的边界。</p>
<div class="pe-details admonition example open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-list-ol fa-fw"
           aria-hidden="true"></i>术语的边界<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                     aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content"><p>保险业务领域有投保单、保单、批单、赔案等保险术语，它们分别应用于保险的不同业务流程。</p>
<ol>
<li>客户投保时，业务人员记录投保信息，系统对应有投保单实体对象。</li>
<li>缴费完成后，业务人员将投保单转为保单，系统对应有保单实体对象，保单实体与投保单实体关联。</li>
<li>如客户需要修改保单信息，保单变为批单，系统对应有批单实体对象，批单实体与保单实体关联。</li>
<li>如果客户发生理赔，生成赔案，系统对应有报案实体对象，报案实体对象与保单或者批单实体关联。</li>
</ol>
<p>投保单、保单、批单、赔案等，这些术语虽然都跟保单有关，但不能将保单这个术语作用在保险全业务领域。<strong>因为术语有它的边界，超出了边界理解上就会出现问题。</strong></p>
<p>如果你对保险业不大了解也没关系，电商肯定再熟悉不过了吧？正如电商领域的商品一样，商品在不同的阶段有不同的术语，在销售阶段是商品，而在运输阶段则变成了货物。</p>
</div>
    </div>
</div>





<div class="pe-tip ">
    同样的一个东西，由于业务领域的不同，赋予了这些术语不同的涵义和职责边界，这个边界就可能会成为未来微服务设计的边界。
</div>

<p>看到这，我想你应该非常清楚了，领域边界就是通过限界上下文来定义的。</p>
<h2 id="限界上下文和微服务的关系">限界上下文和微服务的关系</h2>
<p>接下来，我们对这个概念做进一步的延伸。看看<code>限界上下文</code>和<code>微服务</code>具体存在怎样的关系。</p>
<p>我想你买过车险吧，或者听过吧。车险承保的流程包含了投保、缴费、出单等几个主要流程。如果出险了还会有报案、查勘、定损、理算等理赔流程。</p>
<p>保险领域还是很复杂的，在这里我用一个简化的保险模型来说明下限界上下文和微服务的关系。这里还会用到我们在 [<a href="/topics/cs_tech/ddd_02">DDD架构（二）]<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -3 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" width="18" height="18" stroke-width="2">
      <path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path>
      <path d="M11 13l9 -9"></path>
      <path d="M15 4h5v5"></path>
    </svg></a> 学到一些基础知识，比如领域和子域。</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241209163854158.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241209163854158.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<ul>
<li>
<p>首先，领域可以拆分为多个子领域。一个领域相当于一个问题域，领域拆分为子域的过程就是大问题拆分为小问题的过程。在这个图里面保险领域被拆分为：投保、支付、保单管理和理赔四个子域。</p>
</li>
<li>
<p>子域还可根据需要进一步拆分为子子域，比如，支付子域可继续拆分为收款和付款子子域。拆到一定程度后，有些子子域的领域边界就可能变成限界上下文的边界了。</p>
</li>
<li>
<p>子域可能会包含多个限界上下文，如理赔子域就包括报案、查勘和定损等多个限界上下文（限界上下文与理赔的子子域领域边界重合）。也有可能子域本身的边界就是限界上下文边界，如投保子域。</p>
</li>
<li>
<p>每个领域模型都有它对应的限界上下文，团队在限界上下文内用通用语言交流。领域内所有限界上下文的领域模型构成整个领域的领域模型。</p>
</li>
<li>
<p>理论上限界上下文就是微服务的边界。我们将限界上下文内的领域模型映射到微服务，就完成了从问题域到软件的解决方案。</p>
</li>
</ul>





<div class="pe-tip ">
    可以说，限界上下文是微服务设计和拆分的主要依据。在领域模型中，如果不考虑技术异构、团队沟通等其它外部因素，一个限界上下文理论上就可以设计为一个微服务。
</div>

<p>不过，这里还是要提示一下：<strong>除了理论，微服务的拆分还是有很多限制因素的，在设计中不宜过度拆分。</strong> 那这个度怎么把握好呢？有关微服务设计和具体的拆分方法，我会在实战篇中详细讲解。</p>
<hr>
<h2 id="总结">总结</h2>



    


<span style="color: #e96725"><strong>通用语言确定了项目团队内部交流的统一语言，而这个语言所在的语义环境则是由限界上下文来限定的，以确保语义的唯一性。</strong></span>
<p>而领域专家、架构师和开发人员的主要工作就是通过事件风暴来划分限界上下文。限界上下文确定了微服务的设计和拆分方向，是微服务设计和拆分的主要依据。如果不考虑技术异构、团队沟通等其它外部因素，一个限界上下文理论上就可以设计为一个微服务。</p>
<p>可以说，限界上下文在微服务设计中具有很重要的意义，如果限界上下文的方向偏离，那微服务的设计结果也就可想而知了。因此，我们只有理解了限界上下文的真正涵义以及它在微服务设计中的作用，才能真正发挥DDD的价值，这是基础也是前提。</p>
]]></content:encoded>
    </item>
    <item>
      <title>DDD架构(二) -- 领域</title>
      <link>https://ximplez.github.io/topics/cs_tech/ddd_02/</link>
      <pubDate>Fri, 06 Dec 2024 11:47:31 +0800</pubDate>
      <guid>https://ximplez.github.io/topics/cs_tech/ddd_02/</guid>
      <description>DDD架构介绍</description>
      <content:encoded><![CDATA[<h1 id="关于领域domain的讨论">关于领域【Domain】的讨论</h1>
<h2 id="如何理解领域和子域">如何理解领域和子域？</h2>
<h3 id="什么是领域和子域">什么是领域和子域</h3>





<div class="pe-tip ">
    <p>我们先看一下汉语词典中对领域的解释：“领域是从事一种专门活动或事业的<strong>范围</strong>、部类或部门。”百度百科对领域的解释：“领域具体指一种特定的<strong>范围</strong>或区域。”</p>
<p>两个解释有一个共同点——范围。对了！<strong>领域就是用来确定范围的</strong>，范围即边界，这也是DDD在设计中不断强调边界的原因。</p>

</div>

<p>在研究和解决业务问题时，DDD会按照一定的规则将业务领域进行细分，当领域细分到一定的程度后，DDD会将问题范围限定在特定的边界内，在这个边界内建立领域模型，进而用代码实现该领域模型，解决相应的业务问题。<strong><code>简言之，DDD的领域就是这个边界内要解决的业务问题域</code></strong>。</p>
<p>既然领域是用来限定业务边界和范围的，那么就会有大小之分，领域越大，业务范围就越大，反之则相反。</p>
<p>领域可以进一步划分为子领域。我们把划分出来的多个子领域称为<code>子域</code>，每个子域对应一个更小的问题域或更小的业务范围。</p>
<h3 id="如何建立领域体系">如何建立领域体系</h3>





<div class="pe-tip warning">
    我们知道，DDD是一种处理高度复杂领域的设计思想，它试图分离技术实现的复杂度。那么面对错综复杂的业务领域，DDD是如何使业务从复杂变得简单，更容易让人理解，技术实现更容易呢？
</div>

<p>其实很好理解，DDD的研究方法与自然科学的研究方法类似。当人们在自然科学研究中遇到复杂问题时，通常的做法就是将问题一步一步地细分，再针对细分出来的问题域，逐个深入研究，探索和建立所有子域的知识体系。当所有问题子域完成研究时，我们就建立了全部领域的完整知识体系了。</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241206124244818.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241206124244818.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<p>我们来看一下上面这张图。这个例子是在讲如何给桃树建立一个完整的生物学知识体系。初中生物课其实早就告诉我们研究方法了。<strong>它的研究过程是这样的。</strong></p>
<ul>
<li>
<p><strong>第一步</strong>：确定研究对象，即研究领域，这里是一棵桃树。</p>
</li>
<li>
<p><strong>第二步</strong>：对研究对象进行细分，将桃树细分为器官，器官又分为营养器官和生殖器官两种。其中营养器官包括根、茎和叶，生殖器官包括花、果实和种子。桃树的知识体系是我们已经确定要研究的问题域，对应DDD的领域。根、茎、叶、花、果实和种子等器官则是细分后的问题子域。这个过程就是DDD将领域细分为多个子域的过程。</p>
</li>
<li>
<p><strong>第三步</strong>：对器官进行细分，将器官细分为组织。比如，叶子器官可细分为保护组织、营养组织和输导组织等。这个过程就是DDD将子域进一步细分为多个子域的过程。</p>
</li>
<li>
<p><strong>第四步</strong>：对组织进行细分，将组织细分为细胞，细胞成为我们研究的最小单元。细胞之间的细胞壁确定了单元的边界，也确定了研究的最小边界。</p>
</li>
</ul>
<blockquote>
<p>这里先剧透一点<strong>聚合</strong>、<strong>聚合根</strong>、<strong>实体</strong>以及<strong>值对象</strong>的内容，我会在之后的内容中详细讲解。</p>
</blockquote>
<p>我们知道细胞核、线粒体、细胞膜等物质共同构成细胞，这些物质一起协作让细胞具有这类细胞特定的生物功能。在这里你可以把细胞理解为DDD的<code>聚合</code>，细胞内的这些物质就可以理解为聚合里面的<code>聚合根</code>、<code>实体</code>以及<code>值对象</code>等，在聚合内这些实体一起协作完成特定的业务功能。这个过程类似DDD设计时，确定微服务内功能要素和边界的过程。</p>
<div class="pe-details admonition success open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-check-circle fa-fw"
           aria-hidden="true"></i>领域模型<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                           aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content">这里总结一下，就是说每一个细分的领域都会有一个知识体系，也就是DDD的领域模型。在所有子域的研究完成后，我们就建立了全域的知识体系了，也就建立了全域的领域模型。</div>
    </div>
</div>
<h3 id="案例理解">案例理解</h3>
<p>上面我们用自然科学研究的方法，说明了领域可以通过细分为子域的方法，来降低研究的复杂度。</p>
<p>现在我们把这个话题再切换到业务领域，对比验证下，二者的细分过程是否是一致的。这里以【保险行业】为例。</p>
<div class="pe-details admonition example open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-list-ol fa-fw"
           aria-hidden="true"></i>保险行业案例<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                           aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content"><p>保险是个比较大的领域，很早以前的保险核心系统把所有的功能都放在一个系统里来实现，这个系统就是我们常说的<strong>单体系统</strong>。后来单体系统开始无法适应保险业务的发展，因此保险公司开始了中台转型，引入<strong>分布式微服务架构</strong>来替换原来的单体系统。而分布式微服务架构就需要划分业务领域边界，建立领域模型，并实现微服务落地了。</p>
<p>为实现保险领域建模和微服务建设，我们可以根据业务关联度以及流程边界将保险领域细分为：<code>承保</code>、<code>收付</code>、<code>再保</code>以及<code>理赔</code>等子域，而<code>承保子域</code>还可以继续细分为<code>投保</code>、<code>保全（寿险）</code>、<code>批改（财险）</code>等子子域。</p>
<p>在<code>投保</code>这个<strong>限界上下文</strong>内可以建立投保的领域模型，投保的领域模型最后映射到系统就是投保微服务。这就是一个保险领域的细分和微服务的建设过程。</p>
</div>
    </div>
</div>
<p>那么你可能会说，我不是保险行业的人，我怎么理解这个过程呢？</p>
<p>我认为，不同行业的业务模型可能会不一样，但领域建模和微服务建设的过程和方法基本类似，其核心思想就是<strong>将问题域逐步分解，降低业务理解和系统实现的复杂度</strong>。</p>
<hr>
<h2 id="如何理解核心域通用域和支撑域">如何理解核心域、通用域和支撑域？</h2>
<p>在领域不断划分的过程中，领域会细分为不同的子域，子域可以根据自身重要性和功能属性划分为三类子域，它们分别是：<strong><code>核心域</code></strong>、<strong><code>通用域</code></strong> 和 <strong><code>支撑域</code></strong>。</p>
<ul>
<li>
<p>决定产品和公司核心竞争力的子域是<code>核心域</code>，它是业务成功的主要因素和公司的核心竞争力。</p>
</li>
<li>
<p>没有太多个性化的诉求，同时被多个子域使用的通用功能子域是<code>通用域</code>。</p>
</li>
<li>
<p>还有一种功能子域是必需的，但既不包含决定产品和公司核心竞争力的功能，也不包含通用功能的子域，它就是<code>支撑域</code>。</p>
</li>
</ul>
<p>这三类子域相较之下，<code>核心域</code>是最重要的。<code>通用域</code>和<code>支撑域</code>如果对应到企业系统，举例来说的话，通用域则是你需要用到的通用系统，比如认证、权限等等，这类应用很容易买到，没有企业特点限制，不需要做太多的定制化。而支撑域则具有企业特性，但不具有通用性，例如数据代码类的数据字典等系统。</p>
<h3 id="那为什么要划分核心域通用域和支撑域主要目的是什么呢"><strong>那为什么要划分核心域、通用域和支撑域，主要目的是什么呢？</strong></h3>
<p>还是拿上图的桃树来说吧。我们将桃树细分为了<code>根、茎、叶、花、果实和种子</code>等六个子域，那桃树是否有核心域？有的话，到底哪个是核心域呢？</p>





<div class="pe-tip ">
    <p><strong>不同的人对桃树的理解是不同的</strong>。如果这棵桃树生长在公园里，在园丁的眼里，他喜欢的是“人面桃花相映红”的阳春三月，这时花就是桃树的核心域。但如果这棵桃树生长在果园里，对果农来说，他则是希望在丰收的季节收获硕果累累的桃子，这时果实就是桃树的核心域。</p>
<p><strong>在不同的场景下，不同的人对桃树核心域的理解是不同的，因此对桃树的处理方式也会不一样</strong>。园丁更关注桃树花期的营养，而果农则更关注桃树落果期的营养，有时为了保证果实的营养供给，还会裁剪掉疯长的茎和叶（通用域或支撑域）。</p>

</div>

<p>同样的道理，公司在IT系统建设过程中，由于预算和资源有限，对不同类型的子域应有不同的关注度和资源投入策略，记住好钢要用在刀刃上。</p>
<p>很多公司的业务，表面看上去相似，但商业模式和战略方向是存在很大差异的，因此公司的关注点会不一样，在划分<code>核心域</code>、<code>通用域</code>和<code>支撑域</code>时，其结果也会出现非常大的差异。</p>





<div class="pe-tip warning">
    比如同样都是电商平台的淘宝、天猫、京东和苏宁易购，他们的商业模式是不同的。淘宝是C2C网站，个人卖家对个人买家，而天猫、京东和苏宁易购则是B2C网站，是公司卖家对个人买家。即便是苏宁易购与京东都是B2C的模式，他们的商业模式也是不一样的，苏宁易购是典型的传统线下卖场转型成为电商，京东则是直营加部分平台模式。
</div>

<p>商业模式的不同会导致核心域划分结果的不同。有的公司核心域可能在客户服务，有的可能在产品质量，有的可能在物流。在公司领域细分、建立领域模型和系统建设时，我们就要结合公司战略重点和商业模式，找到<code>核心域</code>了，且重点关注<code>核心域</code>。</p>
<blockquote>
<p>如果你的公司刚好有意向转型微服务架构的话，我建议你和你的技术团队要将核心域的建设排在首位，最好是有绝对的掌控能力和自主研发能力，如果资源实在有限的话，可以在支撑域或者通用域上想想办法，暂时采用外购的方式也未尝不可。</p>
</blockquote>
<hr>
<h1 id="总结">总结</h1>
<p>领域的核心思想就是将<strong>问题域逐级细分，来降低业务理解和系统实现的复杂度。通过领域细分，逐步缩小微服务需要解决的问题域，构建合适的领域模型</strong>，而<code>领域模型</code>映射成系统就是<code>微服务</code>了。</p>
<div class="pe-details admonition success open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-check-circle fa-fw"
           aria-hidden="true"></i>领域划分的目标<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                           aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content"><code>核心域</code>、<code>支撑域</code>和<code>通用域</code>的主要目标是：通过领域划分，区分不同子域在公司内的不同功能属性和重要性，从而公司可对不同子域采取不同的资源投入和建设策略，其关注度也会不一样。</div>
    </div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>DDD架构(一) -- DDD的历史和价值</title>
      <link>https://ximplez.github.io/topics/cs_tech/ddd_01/</link>
      <pubDate>Thu, 05 Dec 2024 12:36:28 +0800</pubDate>
      <guid>https://ximplez.github.io/topics/cs_tech/ddd_01/</guid>
      <description>DDD架构介绍</description>
      <content:encoded><![CDATA[<h2 id="软件架构模式的演进">软件架构模式的演进</h2>
<p>在进入今天的主题之前，我们先来了解下背景。</p>
<p>我们知道，这些年来随着设备和新技术的发展，软件的架构模式发生了很大的变化。软件架构模式大体来说经历了从<strong>单机</strong>、<strong>集中式</strong>到<strong>分布式微服务架构</strong>三个阶段的演进。随着分布式技术的快速兴起，我们已经进入到了微服务架构时代。</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241206103627424.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241206103627424.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<p>我们先来分析一下软件架构模式演进的三个阶段。</p>
<ul>
<li>
<p><strong>第一阶段是单机架构</strong>：采用面向过程的设计方法，系统包括客户端UI层和数据库两层，采用C/S架构模式，整个系统围绕数据库驱动设计和开发，并且总是从设计数据库和字段开始。</p>
</li>
<li>
<p><strong>第二阶段是集中式架构</strong>：采用面向对象的设计方法，系统包括业务接入层、业务逻辑层和数据库层，采用经典的三层架构，也有部分应用采用传统的SOA架构。这种架构容易使系统变得臃肿，可扩展性和弹性伸缩性差。</p>
</li>
<li>
<p><strong>第三阶段是分布式微服务架构</strong>：随着微服务架构理念的提出，集中式架构正向分布式微服务架构演进。微服务架构可以很好地实现应用之间的解耦，解决单体应用扩展性和弹性伸缩能力不足的问题。</p>
</li>
</ul>
<p>我们知道，在单机和集中式架构时代，系统分析、设计和开发往往是独立、分阶段割裂进行的。</p>
<p>比如，在系统建设过程中，我们经常会看到这样的情形：A负责提出需求，B负责需求分析，C负责系统设计，D负责代码实现，这样的流程很长，经手的人也很多，很容易导致信息丢失。最后，就很容易导致需求、设计与代码实现的不一致，往往到了软件上线后，我们才发现很多功能并不是自己想要的，或者做出来的功能跟自己提出的需求偏差太大。</p>
<p>而且在单机和集中式架构这两种模式下，软件无法快速响应需求和业务的迅速变化，最终错失发展良机。此时，分布式微服务的出现就有点恰逢其时的意思了。</p>
<h2 id="微服务设计和拆分的困境">微服务设计和拆分的困境</h2>
<p>那进入微服务架构时代以后，微服务确实也解决了原来采用集中式架构的单体应用的很多问题，比如扩展性、弹性伸缩能力、小规模团队的敏捷开发等等。</p>
<p>但在看到这些好处的同时，微服务实践过程中也产生了不少的争论和疑惑：微服务的粒度应该多大呀？微服务到底应该如何拆分和设计呢？微服务的边界应该在哪里？</p>
<p>可以说，很久以来都没有一套系统的理论和方法可以指导微服务的拆分，包括微服务架构模式的提出者Martin Fowler在提出微服务架构的时候，也没有告诉我们究竟应该如何拆分微服务。</p>
<p>于是，在这段较长的时间里，就有不少人对微服务的理解产生了一些曲解。有人认为：“微服务很简单，不过就是把原来一个单体包拆分为多个部署包，或者将原来的单体应用架构替换为一套支持微服务架构的技术框架，就算是微服务了。” 还有人说：“微服务嘛，就是要微要小，拆得越小效果越好。”</p>
<p>但我想，这两年，你在技术圈中一定听说过一些项目因为前期微服务拆分过度，导致项目复杂度过高，无法上线和运维。</p>
<p>综合来看，我认为微服务拆分困境产生的根本原因就是不知道业务或者微服务的边界到底在什么地方。换句话说，确定了业务边界和应用边界，这个困境也就迎刃而解了。</p>
<p>那如何确定，是否有相关理论或知识体系支持呢？在回答这些问题之前，我们先来了解一下领域驱动设计与微服务的前世今生。</p>
<div class="pe-details admonition note open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-pencil-alt fa-fw"
           aria-hidden="true"></i>DDD的前世今生<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                           aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content"><p>2004年埃里克·埃文斯（Eric Evans）发表了<code>《领域驱动设计》（Domain-Driven Design –Tackling Complexity in the Heart of Software）</code>这本书，从此领域驱动设计（Domain Driven Design，简称DDD）诞生。<strong>DDD核心思想是通过领域驱动设计方法定义领域模型，从而确定业务和应用边界，保证业务模型与代码模型的一致性</strong>。</p>
<p>但DDD提出后在软件开发领域一直都是“雷声大，雨点小”！直到Martin Fowler提出微服务架构，DDD才真正迎来了自己的时代。</p>
<p>有些熟悉DDD设计方法的软件工程师在进行微服务设计时，发现可以利用DDD设计方法来建立领域模型，划分领域边界，再根据这些领域边界从业务视角来划分微服务边界。而按照DDD方法设计出的微服务的业务和应用边界都非常合理，可以很好地实现微服务内部和外部的“<strong>高内聚、低耦合</strong>”。于是越来越多的人开始把DDD作为微服务设计的指导思想。</p>
<p>现在，很多大型互联网企业已经将DDD设计方法作为微服务的主流设计方法了。DDD也从过去“雷声大，雨点小”，开始真正火爆起来。</p>
</div>
    </div>
</div>
<hr>
<h2 id="为什么ddd适合微服务">为什么DDD适合微服务？</h2>
<p>“众里寻他千百度。蓦然回首，那人却在灯火阑珊处。”在经历了多年的迷茫和争论后，微服务终于寻到了他的心上人。</p>
<div class="pe-details admonition question open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-question-circle fa-fw"
           aria-hidden="true"></i>DDD的魔力<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                           aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content">那DDD到底是何方神圣，拥有什么神器呢？</div>
    </div>
</div>
<p>DDD是一种处理高度复杂领域的设计思想，它试图分离技术实现的复杂性，并围绕业务概念构建领域模型来控制业务的复杂性，以解决软件难以理解，难以演进的问题。<strong>DDD不是架构，而是一种架构设计方法论</strong>，它通过边界划分将复杂业务领域简单化，帮我们设计出清晰的领域和应用边界，可以很容易地实现架构演进。</p>
<p><strong>DDD包括<code>战略设计</code>和<code>战术设计</code>两部分。</strong></p>
<p><code>战略设计</code>主要从业务视角出发，建立业务领域模型，划分领域边界，建立通用语言的限界上下文，限界上下文可以作为微服务设计的参考边界。</p>
<p><code>战术设计</code>则从技术视角出发，侧重于领域模型的技术实现，完成软件开发和落地，包括：聚合根、实体、值对象、领域服务、应用服务和资源库等代码逻辑的设计和实现。</p>
<p>我们不妨来看看DDD是如何进行战略设计的。</p>
<p>DDD战略设计会建立领域模型，领域模型可以用于指导微服务的设计和拆分。事件风暴是建立领域模型的主要方法，它是一个从发散到收敛的过程。它通常采用用例分析、场景分析和用户旅程分析，尽可能全面不遗漏地分解业务领域，并梳理领域对象之间的关系，这是一个发散的过程。事件风暴过程会产生很多的实体、命令、事件等领域对象，我们将这些领域对象从不同的维度进行聚类，形成如聚合、限界上下文等边界，建立领域模型，这就是一个收敛的过程。</p>
<p><div class="pe-fancybox">
    <a data-fancybox="gallery" href="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241206103801911.jpeg">
        <img src="https://gcore.jsdelivr.net/gh/ximplez/ximplez.github.io@images/20241206103801911.jpeg#center" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'"/>
    </a>
</div></p>
<p><strong>我们可以用三步来划定领域模型和微服务的边界。</strong></p>
<ul>
<li>
<p><strong>第一步</strong>：在事件风暴中梳理业务过程中的用户操作、事件以及外部依赖关系等，根据这些要素梳理出<code>领域实体</code>等领域对象。</p>
</li>
<li>
<p><strong>第二步</strong>：根据领域实体之间的业务关联性，将业务紧密相关的实体进行组合形成聚合，同时确定聚合中的<code>聚合根</code>、<code>值对象</code>和<code>实体</code>。在这个图里，聚合之间的边界是第一层边界，它们在同一个微服务实例中运行，这个边界是逻辑边界，所以用虚线表示。</p>
</li>
<li>
<p><strong>第三步</strong>：根据业务及语义边界等因素，将一个或者多个聚合划定在一个<code>限界上下文</code>内，形成领域模型。在这个图里，限界上下文之间的边界是第二层边界，这一层边界可能就是未来微服务的边界，不同限界上下文内的领域逻辑被隔离在不同的微服务实例中运行，物理上相互隔离，所以是物理边界，边界之间用实线来表示。</p>
</li>
</ul>
<p>有了这两层边界，微服务的设计就不是什么难事了。</p>
<p>在战略设计中我们建立了领域模型，划定了业务领域的边界，建立了通用语言和限界上下文，确定了领域模型中各个领域对象的关系。到这儿，业务端领域模型的设计工作基本就完成了，这个过程同时也基本确定了应用端的微服务边界。</p>
<p>在从业务模型向微服务落地的过程中，也就是从战略设计向战术设计的实施过程中，我们会将领域模型中的领域对象与代码模型中的代码对象建立映射关系，将业务架构和系统架构进行绑定。当我们去响应业务变化调整业务架构和领域模型时，系统架构也会同时发生调整，并同步建立新的映射关系。</p>
<h2 id="ddd与微服务的关系">DDD与微服务的关系</h2>
<p>有了上面的讲解，现在我们不妨再次总结下DDD与微服务的关系。</p>
<div class="pe-details admonition success open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-check-circle fa-fw"
           aria-hidden="true"></i>DDD与微服务的关系<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                           aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content">DDD是一种架构设计方法，微服务是一种架构风格，两者从本质上都是为了追求高响应力，而从业务视角去分离应用系统建设复杂度的手段。两者都强调从业务出发，其核心要义是强调根据业务发展，合理划分领域边界，持续调整现有架构，优化现有代码，以保持架构和代码的生命力，也就是我们常说的演进式架构。</div>
    </div>
</div>
<p><strong>DDD主要关注</strong>：从业务领域视角划分领域边界，构建通用语言进行高效沟通，通过业务抽象，建立领域模型，维持业务和代码的逻辑一致性。</p>
<p><strong>微服务主要关注</strong>：运行时的进程间通信、容错和故障隔离，实现去中心化数据管理和去中心化服务治理，关注微服务的独立开发、测试、构建和部署。</p>
<hr>
<h2 id="总结">总结</h2>
<div class="pe-details admonition success open">
    <div class="pe-details-summary admonition-title">
        <i class="icon fas fa-check-circle fa-fw"
           aria-hidden="true"></i>总结<i class="pe-details-icon fas fa-angle-right fa-fw"
                                                                           aria-hidden="true"></i>
    </div>
    <div class="pe-details-content">
        <div class="admonition-content"><p>今天我们主要讨论了微服务设计和拆分的难题。通过DDD战略设计可以建立领域模型，划定领域边界，解决微服务设计过程中，边界难以划定的难题。如果你的业务焦点在领域和领域逻辑，那么你就可以选择DDD作为微服务的设计方法！</p>
<p>更关键的一点是，DDD不仅可以用于微服务设计，还可以很好地应用于企业中台的设计。如果你的企业正在做中台转型，DDD将会是一把利器，它可以帮你建立一个非常好的企业级中台业务模型。有关这点你还会在后面的文章中见到详解。</p>
<p>除此之外，DDD战术设计对设计和开发人员的要求相对较高，实现起来相对复杂。不同企业的研发管理能力和个人开发水平可能会存在差异。尤其对于传统企业而言，在战术设计落地的过程中，可能会存在一定挑战和困难，我建议你和你的公司如果有这方面的想法，就一定要谨慎评估自己的能力，选择最合适的方法落地DDD。</p>
</div>
    </div>
</div>
<p>也不妨根据收获权衡一下，<strong>总体来说，DDD可以给你带来以下收获：</strong></p>
<ol>
<li>DDD是一套完整而系统的设计方法，它能带给你从战略设计到战术设计的标准设计过程，使得你的设计思路能够更加清晰，设计过程更加规范。</li>
<li>DDD善于处理与领域相关的拥有高复杂度业务的产品开发，通过它可以建立一个核心而稳定的领域模型，有利于领域知识的传递与传承。</li>
<li>DDD强调团队与领域专家的合作，能够帮助你的团队建立一个沟通良好的氛围，构建一致的架构体系。</li>
<li>DDD的设计思想、原则与模式有助于提高你的架构设计能力。</li>
<li>无论是在新项目中设计微服务，还是将系统从单体架构演进到微服务，都可以遵循DDD的架构原则。</li>
<li>DDD不仅适用于微服务，也适用于传统的单体应用。</li>
</ol>
]]></content:encoded>
    </item>
  </channel>
</rss>
